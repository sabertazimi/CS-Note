"use strict";(self.webpackChunkawesome_notes=self.webpackChunkawesome_notes||[]).push([[8945],{5131:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Web/React/ReduxBasicNotes","title":"Redux Basic Notes","description":"Redux Concepts","source":"@site/notes/Web/React/ReduxBasicNotes.md","sourceDirName":"Web/React","slug":"/Web/React/ReduxBasicNotes","permalink":"/awesome-notes/Web/React/ReduxBasicNotes","draft":false,"unlisted":false,"editUrl":"https://github.com/sabertazimi/awesome-notes/edit/main/notes/Web/React/ReduxBasicNotes.md","tags":[{"inline":true,"label":"Web","permalink":"/awesome-notes/tags/web"},{"inline":true,"label":"React","permalink":"/awesome-notes/tags/react"},{"inline":true,"label":"Redux","permalink":"/awesome-notes/tags/redux"},{"inline":true,"label":"State Management","permalink":"/awesome-notes/tags/state-management"}],"version":"current","lastUpdatedBy":"renovate[bot]","lastUpdatedAt":1734246257000,"frontMatter":{"author":"Sabertazimi","authorTitle":"Web Developer","authorURL":"https://github.com/sabertazimi","authorImageURL":"https://github.com/sabertazimi.png","tags":["Web","React","Redux","State Management"]},"sidebar":"tutorialSidebar","previous":{"title":"React Router Basic Notes","permalink":"/awesome-notes/Web/React/ReactRouterBasicNotes"},"next":{"title":"Security Basic Notes","permalink":"/awesome-notes/Web/Security/SecurityBasicNotes"}}');var s=t(5105),i=t(842);const o={author:"Sabertazimi",authorTitle:"Web Developer",authorURL:"https://github.com/sabertazimi",authorImageURL:"https://github.com/sabertazimi.png",tags:["Web","React","Redux","State Management"]},a="Redux Basic Notes",d={},c=[{value:"Redux Concepts",id:"redux-concepts",level:2},{value:"Store",id:"store",level:2},{value:"Create Store",id:"create-store",level:3},{value:"Configure Store",id:"configure-store",level:3},{value:"State",id:"state",level:2},{value:"Persisted State",id:"persisted-state",level:3},{value:"Normalized State",id:"normalized-state",level:3},{value:"Entity Adapter Tool",id:"entity-adapter-tool",level:4},{value:"Action",id:"action",level:2},{value:"Reducer",id:"reducer",level:2},{value:"Reducer Boilerplate",id:"reducer-boilerplate",level:3},{value:"Reducer Enhancer",id:"reducer-enhancer",level:3},{value:"RTK Reducer API",id:"rtk-reducer-api",level:3},{value:"Slice",id:"slice",level:2},{value:"Selector",id:"selector",level:2},{value:"UseSelector Hook",id:"useselector-hook",level:3},{value:"CreateSelector API",id:"createselector-api",level:3},{value:"Selector Best Practice and Pitfalls",id:"selector-best-practice-and-pitfalls",level:3},{value:"Thunk",id:"thunk",level:2},{value:"Thunk Middleware Implementation",id:"thunk-middleware-implementation",level:3},{value:"Create Async Thunk API",id:"create-async-thunk-api",level:3},{value:"Middleware",id:"middleware",level:2},{value:"Middleware Basic Concepts",id:"middleware-basic-concepts",level:3},{value:"Middleware Simple Implementation",id:"middleware-simple-implementation",level:3},{value:"Scheduler Middleware",id:"scheduler-middleware",level:3},{value:"Thunk Middleware",id:"thunk-middleware",level:3},{value:"Typed Middleware",id:"typed-middleware",level:3},{value:"RTK Query",id:"rtk-query",level:2},{value:"Server State Management",id:"server-state-management",level:3},{value:"Basic RTK Query Usage",id:"basic-rtk-query-usage",level:3},{value:"RTK Query Cache Mechanism",id:"rtk-query-cache-mechanism",level:3},{value:"RTK Query Selector",id:"rtk-query-selector",level:3},{value:"Splitting Query Endpoints",id:"splitting-query-endpoints",level:3},{value:"Transform Query Response",id:"transform-query-response",level:3},{value:"RTK Query Reference",id:"rtk-query-reference",level:3},{value:"React Redux Binding Library",id:"react-redux-binding-library",level:2},{value:"Typed React Redux Hooks",id:"typed-react-redux-hooks",level:3},{value:"Custom React Redux Hooks",id:"custom-react-redux-hooks",level:3},{value:"React Redux API Reference",id:"react-redux-api-reference",level:3},{value:"Redux Server Side Rendering",id:"redux-server-side-rendering",level:2},{value:"Redux Internal",id:"redux-internal",level:2},{value:"Store Constructor Implementation",id:"store-constructor-implementation",level:3},{value:"Action Validation",id:"action-validation",level:3},{value:"Provider and Connection",id:"provider-and-connection",level:3},{value:"Redux Performance",id:"redux-performance",level:2},{value:"Redux Code Splitting",id:"redux-code-splitting",level:3},{value:"Redux Performance Pitfalls",id:"redux-performance-pitfalls",level:3},{value:"Redux Performance Best Practice",id:"redux-performance-best-practice",level:3},{value:"Redux Best Practice",id:"redux-best-practice",level:2},{value:"Redux Necessity",id:"redux-necessity",level:3},{value:"Redux Style Guide",id:"redux-style-guide",level:3},{value:"Redux Tips",id:"redux-tips",level:3},{value:"State Management",id:"state-management",level:3},{value:"Redux Tools",id:"redux-tools",level:2},{value:"Immutable Data Tools",id:"immutable-data-tools",level:3},{value:"Middleware Tools",id:"middleware-tools",level:3},{value:"State Tools",id:"state-tools",level:3},{value:"Debugging Tools",id:"debugging-tools",level:3},{value:"Redux Reference",id:"redux-reference",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"redux-basic-notes",children:"Redux Basic Notes"})}),"\n",(0,s.jsx)(n.h2,{id:"redux-concepts",children:"Redux Concepts"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u5355\u4e00\u6570\u636e\u6e90: \u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u72b6\u6001\u5b58\u50a8\u5728\u5355\u4e2a\u5bf9\u8c61\u6811\u4e2d (\u5bb9\u6613\u8ddf\u8e2a/\u8c03\u8bd5)"}),"\n",(0,s.jsx)(n.li,{children:"\u72b6\u6001\u53ea\u8bfb: \u901a\u8fc7 dispatch(action) \u95f4\u63a5\u66f4\u6539\u72b6\u6001, \u4e0d\u76f4\u63a5\u5199\u5165\u72b6\u6001"}),"\n",(0,s.jsx)(n.li,{children:"\u7eaf\u51fd\u6570\u66f4\u6539\u72b6\u6001: reducer(state, action) => newState"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"store",children:"Store"}),"\n",(0,s.jsx)(n.p,{children:"Redux \u4e2d\u53ea\u6709\u4e00\u4e2a\u5168\u5c40\u552f\u4e00 store \u72b6\u6001\u6811, \u4e14\u7531 reducers \u521b\u5efa store."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"export default appStore = createStore(rootReducers, initState)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"create-store",children:"Create Store"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { applyMiddleware, createStore } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport thunkMiddleware from 'redux-thunk'\n\nimport monitorReducersEnhancer from './enhancers/monitorReducers'\nimport loggerMiddleware from './middleware/logger'\nimport rootReducer from './reducers'\n\nexport default function configureStore(preloadedState) {\n  const middlewares = [loggerMiddleware, thunkMiddleware]\n  const middlewareEnhancer = applyMiddleware(...middlewares)\n\n  const enhancers = [middlewareEnhancer, monitorReducersEnhancer]\n  const composedEnhancers = composeWithDevTools(...enhancers)\n\n  const store = createStore(rootReducer, preloadedState, composedEnhancers)\n\n  if (process.env.NODE_ENV !== 'production' && module.hot)\n    module.hot.accept('./reducers', () => store.replaceReducer(rootReducer))\n\n  return store\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"configure-store",children:"Configure Store"}),"\n",(0,s.jsxs)(n.p,{children:["By default, ",(0,s.jsx)(n.code,{children:"configureStore"})," from Redux Toolkit will:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Call ",(0,s.jsx)(n.code,{children:"applyMiddleware"})," with a default list of middlewares","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/reduxjs/redux-thunk",children:"Async thunk middleware"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://redux-toolkit.js.org/api/immutabilityMiddleware",children:"Immutability check middleware"}),":\nthrow error when detecting mutations in reducers during a dispatch."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://redux-toolkit.js.org/api/serializabilityMiddleware",children:"Serializability check middleware"}),":\nthrow error when deeply detecting non-serializable values in state tree\n(functions, promises, symbols, and other non-plain-data values)."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Call ",(0,s.jsx)(n.code,{children:"composeWithDevTools"})," to set up the Redux DevTools Extension."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\nimport loggerMiddleware from './middleware/logger'\nimport rootReducer from './reducers'\n\nexport default function configureAppStore(preloadedState) {\n  const store = configureStore({\n    reducer: rootReducer,\n    middleware: [loggerMiddleware, ...getDefaultMiddleware()],\n    preloadedState,\n  })\n\n  if (process.env.NODE_ENV === 'development' && module.hot)\n    module.hot.accept('./reducers', () => store.replaceReducer(rootReducer))\n\n  return store\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"state",children:"State"}),"\n",(0,s.jsx)(n.p,{children:"\u5728 Redux \u4e2d State \u5e76\u4e0d\u663e\u5f0f\u5b9a\u4e49:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u521d\u6001\u4e0e\u53d8\u5316\u6001\u7686\u7531 Reducers \u5b9a\u4e49\u5e76\u63a7\u5236"}),"\n",(0,s.jsx)(n.li,{children:"Actions \u4e2d\u4fdd\u5b58\u7740 action.type \u5916, \u8fd8\u4fdd\u5b58\u7740\u4f9b Reducers \u8fdb\u884c\u6709\u6548\u72b6\u6001\u53d8\u5316\u7684\u5176\u4ed6\u4fe1\u606f(\u53ef\u81ea\u5b9a\u4e49)"}),"\n",(0,s.jsx)(n.li,{children:"\u8c03\u7528 Dispatch \u65b9\u6cd5\u81ea\u52a8\u5411 Store \u4f20\u9012\u4e00\u4e2a Action(\u56e0\u4e3a\u53ea\u6709\u4e00\u4e2a\u5168\u5c40 Store, \u6545\u65e0\u9700\u989d\u5916\u6307\u5b9a Store \u53c2\u6570),\nStore \u904d\u5386\u8c03\u7528\u5176\u4e2d\u7684 Reducers, \u6839\u636e switch \u8bed\u53e5\u8fdb\u884c\u5339\u914d action \u5904\u7406"}),"\n",(0,s.jsx)(n.li,{children:"reducer \u53ea\u4fdd\u5b58\u6700\u57fa\u672c\u7684 state, \u53ef\u8ba1\u7b97\u51fa\u7684 state \u653e\u5728 mapStateToProps(selector) \u4e2d\u76f4\u63a5\u8ba1\u7b97\u540e\u7ed1\u5b9a\u81f3 props"}),"\n",(0,s.jsx)(n.li,{children:"\u5c06\u6570\u636e\u4fdd\u5b58\u5728 Redux \u5b58\u50a8\u4e2d, \u5e76\u5728\u7ec4\u4ef6\u5185\u90e8\u4fdd\u6301 UI \u76f8\u5173\u72b6\u6001"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"persisted-state",children:"Persisted State"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// localStorage.getItem('state')/localStorage.setItem('state', serializedState)\nconst persistedState = loadLocalStorageState()\nconst appStore = createStore(rootReducers, persistedState)\n\nappStore.subscribe(\n  throttle(() => {\n    saveLocalStorageState({\n      todos: store.getState().todos,\n    })\n  }, 1000)\n)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"normalized-state",children:"Normalized State"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://redux.js.org/usage/structuring-reducers/normalizing-state-shape",children:"Redux normalizing state shape"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Only have one copy of each particular piece of data in state (no duplication)."}),"\n",(0,s.jsx)(n.li,{children:"Normalized data is kept in lookup table (key-value store),\nwhere item IDs are keys, items themselves are values."}),"\n",(0,s.jsx)(n.li,{children:"There may also be an array of all of the IDs for a particular item type."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Normalizing data:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Each type of data gets its own ",(0,s.jsx)(n.code,{children:"table"})," in state."]}),"\n",(0,s.jsxs)(n.li,{children:["Each ",(0,s.jsx)(n.code,{children:"data table"})," should store individual items in an ",(0,s.jsx)(n.code,{children:"{ key, value }"})," object:\n",(0,s.jsx)(n.code,{children:'"p1" : { id : "p1", author : "user1", comments : ["comment1", "comment2"] }'}),"."]}),"\n",(0,s.jsx)(n.li,{children:"Any references to individual items should be item ID."}),"\n",(0,s.jsx)(n.li,{children:"Arrays of IDs should be used to indicate ordering."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const state = {\n  users: {\n    ids: ['user1', 'user2', 'user3'],\n    entities: {\n      user1: { id: 'user1', firstName, lastName },\n      user2: { id: 'user2', firstName, lastName },\n      user3: { id: 'user3', firstName, lastName },\n    },\n  },\n}\n\nconst userId = 'user2'\nconst userObject = state.users.entities[userId]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Normalize nesting data with ",(0,s.jsx)(n.a,{href:"https://github.com/paularmstrong/normalizr",children:"Normalizr"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const data = {\n  entities: {\n    authors: { byId: {}, allIds: [] },\n    books: { byId: {}, allIds: [] },\n    authorBook: {\n      byId: {\n        1: {\n          id: 1,\n          authorId: 5,\n          bookId: 22,\n        },\n        2: {\n          id: 2,\n          authorId: 5,\n          bookId: 15,\n        },\n        3: {\n          id: 3,\n          authorId: 42,\n          bookId: 12,\n        },\n      },\n      allIds: [1, 2, 3],\n    },\n  },\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const blogPosts = [\n  {\n    id: 'post1',\n    author: { username: 'user1', name: 'User 1' },\n    body: '......',\n    comments: [\n      {\n        id: 'comment1',\n        author: { username: 'user2', name: 'User 2' },\n        comment: '.....',\n      },\n      {\n        id: 'comment2',\n        author: { username: 'user3', name: 'User 3' },\n        comment: '.....',\n      },\n    ],\n  },\n  {\n    id: 'post2',\n    author: { username: 'user2', name: 'User 2' },\n    body: '......',\n    comments: [\n      {\n        id: 'comment3',\n        author: { username: 'user3', name: 'User 3' },\n        comment: '.....',\n      },\n      {\n        id: 'comment4',\n        author: { username: 'user1', name: 'User 1' },\n        comment: '.....',\n      },\n      {\n        id: 'comment5',\n        author: { username: 'user3', name: 'User 3' },\n        comment: '.....',\n      },\n    ],\n  },\n  // and repeat many times\n]\n\nconst normalizedBlogPosts = {\n  posts: {\n    byId: {\n      post1: {\n        id: 'post1',\n        author: 'user1',\n        body: '......',\n        comments: ['comment1', 'comment2'],\n      },\n      post2: {\n        id: 'post2',\n        author: 'user2',\n        body: '......',\n        comments: ['comment3', 'comment4', 'comment5'],\n      },\n    },\n    allIds: ['post1', 'post2'],\n  },\n  comments: {\n    byId: {\n      comment1: {\n        id: 'comment1',\n        author: 'user2',\n        comment: '.....',\n      },\n      comment2: {\n        id: 'comment2',\n        author: 'user3',\n        comment: '.....',\n      },\n      comment3: {\n        id: 'comment3',\n        author: 'user3',\n        comment: '.....',\n      },\n      comment4: {\n        id: 'comment4',\n        author: 'user1',\n        comment: '.....',\n      },\n      comment5: {\n        id: 'comment5',\n        author: 'user3',\n        comment: '.....',\n      },\n    },\n    allIds: ['comment1', 'comment2', 'comment3', 'comment4', 'comment5'],\n  },\n  users: {\n    byId: {\n      user1: {\n        username: 'user1',\n        name: 'User 1',\n      },\n      user2: {\n        username: 'user2',\n        name: 'User 2',\n      },\n      user3: {\n        username: 'user3',\n        name: 'User 3',\n      },\n    },\n    allIds: ['user1', 'user2', 'user3'],\n  },\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"entity-adapter-tool",children:"Entity Adapter Tool"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://redux-toolkit.js.org/api/createEntityAdapter",children:"createEntityAdapter"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Build normalized state."}),"\n",(0,s.jsx)(n.li,{children:"Return normalized state CURD operation reducers."}),"\n",(0,s.jsxs)(n.li,{children:["Get data selectors by ",(0,s.jsx)(n.code,{children:"getSelectors"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import {\n  createAsyncThunk,\n  createEntityAdapter,\n  createSlice,\n} from '@reduxjs/toolkit'\nimport { client } from './api'\n\nconst postsAdapter = createEntityAdapter({\n  sortComparer: (a, b) => b.date.localeCompare(a.date),\n})\n\n// State = { ids: [], entities: {}, status: 'idle', error: null };\nconst initialState = postsAdapter.getInitialState({\n  status: 'idle',\n  error: null,\n})\n\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n  const response = await client.get('/fakeApi/posts')\n  return response.data\n})\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    reactionAdded(state, action) {\n      const { postId, reaction } = action.payload\n      const existingPost = state.entities[postId]\n      if (existingPost)\n        existingPost.reactions[reaction]++\n    },\n    postUpdated(state, action) {\n      const { id, title, content } = action.payload\n      const existingPost = state.entities[id]\n      if (existingPost) {\n        existingPost.title = title\n        existingPost.content = content\n      }\n    },\n  },\n  extraReducers(builder) {\n    builder\n      .addCase(fetchPosts.fulfilled, (state, action) => {\n        state.status = 'succeeded'\n        // Use the `upsertMany` reducer as a mutating update utility\n        postsAdapter.upsertMany(state, action.payload)\n      })\n      // Use the `addOne` reducer for the fulfilled case\n      .addCase(addNewPost.fulfilled, postsAdapter.addOne)\n  },\n})\n\nexport const { postAdded, postUpdated, reactionAdded } = postsSlice.actions\n\n// Export the customized selectors for this adapter using `getSelectors`\nexport const {\n  selectAll: selectAllPosts,\n  selectById: selectPostById,\n  selectIds: selectPostIds,\n  // Pass in a selector that returns the posts slice of state\n} = postsAdapter.getSelectors(state => state.posts)\n\nexport const selectPostsByUser = createSelector(\n  [selectAllPosts, (state, userId) => userId],\n  (posts, userId) => posts.filter(post => post.user === userId)\n)\n\nexport default postsSlice.reducer\n"})}),"\n",(0,s.jsx)(n.h2,{id:"action",children:"Action"}),"\n",(0,s.jsxs)(n.p,{children:["Because of ",(0,s.jsx)(n.code,{children:"ActionCreator.toString()"})," override,\naction creators returned by ",(0,s.jsx)(n.code,{children:"createAction()"}),"\ncan be used directly as ",(0,s.jsx)(n.strong,{children:"keys"})," for ",(0,s.jsx)(n.code,{children:"case reducers"})," passed to ",(0,s.jsx)(n.code,{children:"createReducer()"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { createAction } from '@reduxjs/toolkit'\n\nconst increment = createAction<number | undefined>('counter/increment')\n\nlet action = increment() // { type: 'counter/increment' }\naction = increment(3) // returns { type: 'counter/increment', payload: 3 }\nconsole.log(increment.toString())\nconsole.log(`The action type is: ${increment}`)\n// 'counter/increment'\n// 'The action type is: counter/increment'\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { createAction, nanoid } from '@reduxjs/toolkit'\n\nconst addTodo = createAction('todos/add', (text: string) => {\n  return {\n    payload: {\n      text,\n      id: nanoid(),\n      createdAt: new Date().toISOString(),\n    },\n  }\n})\n\nconsole.log(addTodo('Write more docs'))\n/**\n * {\n *   type: 'todos/add',\n *   payload: {\n *     text: 'Write more docs',\n *     id: '4AJvwMsWeHCChcWYga3dj',\n *     createdAt: '2019-10-03T07:53:36.581Z'\n *   }\n * }\n */\n"})}),"\n",(0,s.jsx)(n.admonition,{title:"RTK Pitfall",type:"tip",children:(0,s.jsx)(n.p,{children:"Strongly recommend to only use string action types."})}),"\n",(0,s.jsxs)(n.p,{children:["Redux Toolkit rests on the assumption that you use string action types.\nSpecifically, some of its features rely on the fact that with strings,\n",(0,s.jsx)(n.code,{children:"toString()"})," method of ",(0,s.jsx)(n.code,{children:"createAction()"})," action creator returns matching action type."]}),"\n",(0,s.jsxs)(n.p,{children:["This is not the case for non-string action types because ",(0,s.jsx)(n.code,{children:"toString()"}),"\nwill return the string-converted type value rather than the type ",(0,s.jsx)(n.strong,{children:"itself"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const INCREMENT = Symbol('increment')\nconst increment = createAction(INCREMENT)\n\nincrement.toString()\n\n// returns the string 'Symbol(increment)',\n// not the INCREMENT symbol itself.\nassert(increment.toString() === INCREMENT, false)\n\nconst counterReducer = createReducer(0, {\n  // The following case reducer will NOT trigger for\n  // increment() actions because `increment` will be\n  // interpreted as a string, rather than being evaluated\n  // to the INCREMENT symbol.\n  [increment]: (state, action) => state + action.payload,\n\n  // You would need to use the action type explicitly instead.\n  [INCREMENT]: (state, action) => state + action.payload,\n})\n"})}),"\n",(0,s.jsx)(n.h2,{id:"reducer",children:"Reducer"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://redux.js.org/recipes/reducing-boilerplate",children:"Reducing Boilerplate"})}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["\u5fc5\u987b\u4fdd\u6301\u65e0\u4efb\u4f55\u526f\u4f5c\u7528: \u4e0d\u4fee\u6539\u4f20\u5165\u53c2\u6570, \u4e0d\u8c03\u7528\u526f\u4f5c\u7528\u51fd\u6570\n",(0,s.jsx)(n.code,{children:"(api/date.now()/math.random())"})]}),"\n",(0,s.jsx)(n.h3,{id:"reducer-boilerplate",children:"Reducer Boilerplate"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"function createReducer(initialState, handlers) {\n  return function reducer(state = initialState, action) {\n    if (Object.prototype.hasOwnProperty.call(handlers, action.type))\n      return handlers[action.type](state, action)\n    else return state\n  }\n}\n\nconst reducer = createReducer(initialState, {\n  reset: () => initialState,\n  increment: state => ({ count: state.count + 1 }),\n  decrement: state => ({ count: state.count + 1 }),\n  [ActionTypes.ADD_TODO]: (state, action) => {},\n})\n"})}),"\n",(0,s.jsx)(n.h3,{id:"reducer-enhancer",children:"Reducer Enhancer"}),"\n",(0,s.jsxs)(n.p,{children:["Implement reducer enhancer with ",(0,s.jsx)(n.code,{children:"higher order reducer"}),",\nlike ",(0,s.jsx)(n.a,{href:"https://github.com/omnidan/redux-undo",children:"Redux Undo"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"function undoable(reducer) {\n  // Call the reducer with empty action to populate the initial state\n  const initialState = {\n    past: [],\n    present: reducer(undefined, {}),\n    future: [],\n  }\n\n  // Return a reducer that handles undo and redo\n  return function (state = initialState, action) {\n    const { past, present, future } = state\n\n    switch (action.type) {\n      case 'UNDO': {\n        const previous = past[past.length - 1]\n        const newPast = past.slice(0, past.length - 1)\n        return {\n          past: newPast,\n          present: previous,\n          future: [present, ...future],\n        }\n      }\n      case 'REDO': {\n        const next = future[0]\n        const newFuture = future.slice(1)\n        return {\n          past: [...past, present],\n          present: next,\n          future: newFuture,\n        }\n      }\n      default: {\n        // Delegate handling the action to the passed reducer\n        const newPresent = reducer(present, action)\n        if (present === newPresent)\n          return state\n\n        return {\n          past: [...past, present],\n          present: newPresent,\n          future: [],\n        }\n      }\n    }\n  }\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// This is a reducer\nimport { createStore } from 'redux'\n\nfunction todos(state = [], action) {\n  /* ... */\n}\n\n// This is also a reducer!\nconst undoableTodos = undoable(todos)\nconst store = createStore(undoableTodos)\n\nstore.dispatch({\n  type: 'ADD_TODO',\n  text: 'Use Redux',\n})\n\nstore.dispatch({\n  type: 'ADD_TODO',\n  text: 'Implement Undo',\n})\n\nstore.dispatch({\n  type: 'UNDO',\n})\n"})}),"\n",(0,s.jsx)(n.h3,{id:"rtk-reducer-api",children:"RTK Reducer API"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"createReducer"}),": ",(0,s.jsx)(n.code,{children:"builder.addCase"})," and ",(0,s.jsx)(n.code,{children:"builder.addMatcher"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["If there is an exact match for the action type,\nthe corresponding ",(0,s.jsx)(n.code,{children:"case reducer"})," (",(0,s.jsx)(n.code,{children:"CaseReducer<State, Action>"}),") will execute first."]}),"\n",(0,s.jsx)(n.li,{children:"Any matchers that return true\nwill execute in the order they were defined."}),"\n",(0,s.jsx)(n.li,{children:"If a default case reducer is provided,\nand no case or matcher reducers ran,\nthe default case reducer will execute."}),"\n",(0,s.jsx)(n.li,{children:"If no case or matcher reducers ran,\nthe original existing state value will be returned unchanged."}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ActionCreator"})," from RTK has method ",(0,s.jsx)(n.code,{children:"ActionCreator.match(action: Action)"}),",\ncan used to TypeScript type narrowing."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// Simple matcher\nfunction isNumberValueAction(\n  action: AnyAction\n): action is PayloadAction<{ value: number }> {\n  return typeof action.payload.value === 'number'\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { createReducer } from '@reduxjs/toolkit'\n\nconst reducer = createReducer(0, (builder) => {\n  builder\n    .addCase('increment', state => state + 1)\n    .addMatcher(\n      action => action.startsWith('i'),\n      state => state * 5\n    )\n    .addMatcher(\n      action => action.endsWith('t'),\n      state => state + 2\n    )\n})\n\nconsole.log(reducer(0, { type: 'increment' }))\n// Returns 7, as the 'increment' case and both matchers all ran in sequence:\n// - case 'increment\": 0 => 1\n// - matcher starts with 'i': 1 => 5\n// - matcher ends with 't': 5 => 7\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"createReducer"})," and ",(0,s.jsx)(n.code,{children:"createSlice"}),"\nuses ",(0,s.jsx)(n.a,{href:"https://github.com/immerjs/immer",children:"immer"}),"\nto let you write reducers as if they were mutating the state directly.\nIn reality, the reducer receives a proxy state\nthat translates all mutations into equivalent copy operations."]}),"\n",(0,s.jsx)(n.admonition,{title:"Mutating State Case",type:"danger",children:(0,s.jsxs)(n.p,{children:["Only write ",(0,s.jsx)(n.strong,{children:"mutating"})," logic in RTK ",(0,s.jsx)(n.code,{children:"createSlice"})," and ",(0,s.jsx)(n.code,{children:"createReducer"})," API."]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { createAction, createReducer } from '@reduxjs/toolkit'\n\ninterface Todo {\n  text: string\n  completed: boolean\n}\n\nconst addTodo = createAction<Todo>('todos/add')\nconst toggleTodo = createAction<number>('todos/toggle')\n\nconst todosReducer = createReducer([] as Todo[], (builder) => {\n  builder\n    .addCase(addTodo, (state, action) => {\n      // This push() operation gets translated into\n      // the same extended-array creation as in the previous example.\n      const todo = action.payload\n      state.push(todo)\n    })\n    .addCase(toggleTodo, (state, action) => {\n      // The \"mutating\" version of this case reducer is\n      // much more direct than the explicitly pure one.\n      const index = action.payload\n      const todo = state[index]\n      todo.completed = !todo.completed\n    })\n})\n"})}),"\n",(0,s.jsx)(n.admonition,{title:"Reducer Pitfall",type:"tip",children:(0,s.jsxs)(n.p,{children:["Ensure that either mutate state argument or return a new state, but ",(0,s.jsx)(n.strong,{children:"not both"}),"."]})}),"\n",(0,s.jsx)(n.p,{children:"Following reducer would throw an exception if a toggleTodo action is passed:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { createAction, createReducer } from '@reduxjs/toolkit'\n\ninterface Todo {\n  text: string\n  completed: boolean\n}\n\nconst toggleTodo = createAction<number>('todos/toggle')\n\nconst todosReducer = createReducer([] as Todo[], (builder) => {\n  builder.addCase(toggleTodo, (state, action) => {\n    const index = action.payload\n    const todo = state[index]\n\n    // This case reducer both mutates the passed-in state...\n    todo.completed = !todo.completed\n\n    // And returns a new value.\n    // This will throw an exception.\n    // In this example, the easiest fix is to remove the `return` statement.\n    return [...state.slice(0, index), todo, ...state.slice(index + 1)]\n  })\n})\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Other pitfalls for ",(0,s.jsx)(n.code,{children:"State Proxy"})," in ",(0,s.jsx)(n.a,{href:"https://immerjs.github.io/immer/pitfalls",children:"ImmerJS"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Draft"})," objects in ",(0,s.jsx)(n.code,{children:"Immer"})," are wrapped in ",(0,s.jsx)(n.code,{children:"Proxy"}),",\nso you cannot use ",(0,s.jsx)(n.code,{children:"=="})," or ",(0,s.jsx)(n.code,{children:"==="})," to test equality:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"original"})," instead: ",(0,s.jsx)(n.code,{children:"const index = original(list).indexOf(element)"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Use unique ",(0,s.jsx)(n.code,{children:"id"})," field instead."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"slice",children:"Slice"}),"\n",(0,s.jsxs)(n.p,{children:["Slice API is standard approach for writing Redux logic.\nInternally, it uses ",(0,s.jsx)(n.code,{children:"createAction"})," and ",(0,s.jsx)(n.code,{children:"createReducer"}),",\nalso use ",(0,s.jsx)(n.code,{children:"Immer"})," to write immutable updates."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import type { PayloadAction } from '@reduxjs/toolkit'\nimport { createSlice } from '@reduxjs/toolkit'\n\ninterface CounterState {\n  value: number\n}\n\nconst initialState = { value: 0 } as CounterState\n\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increment(state) {\n      state.value++\n    },\n    decrement(state) {\n      state.value--\n    },\n    incrementByAmount(state, action: PayloadAction<number>) {\n      state.value += action.payload\n    },\n  },\n})\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions\nexport default counterSlice.reducer\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"extraReducers"})," allows ",(0,s.jsx)(n.code,{children:"createSlice"})," to respond to\n",(0,s.jsx)(n.strong,{children:"other"})," action types besides the types it has generated."]}),"\n",(0,s.jsxs)(n.p,{children:["If two fields from reducers and extraReducers\nhappen to end up with the ",(0,s.jsx)(n.strong,{children:"same"})," action type string,\nthe function from ",(0,s.jsx)(n.strong,{children:"reducers"})," will be used to handle that action type."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import type { Action, AnyAction } from '@reduxjs/toolkit'\nimport { createAction, createSlice } from '@reduxjs/toolkit'\n\ninterface RejectedAction extends Action {\n  error: Error\n}\n\ninterface Item {\n  id: string\n  text: string\n}\n\n// Counter actions\nconst incrementBy = createAction<number>('incrementBy')\nconst decrement = createAction('decrement')\n\nfunction isRejectedAction(action: AnyAction): action is RejectedAction {\n  return action.type.endsWith('rejected')\n}\n\nconst todosSlice = createSlice({\n  name: 'todo',\n  initialState: [] as Item[],\n  // Todo reducers\n  reducers: {\n    addTodo: {\n      reducer: (state, action: PayloadAction<Item>) => {\n        state.push(action.payload)\n      },\n      // Action creator prepare callback\n      prepare: (text: string) => {\n        const id = nanoid()\n        return { payload: { id, text } }\n      },\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementBy, (state, action) => {\n        // action is inferred correctly here if using TS\n      })\n      // You can chain calls, or have separate `builder.addCase()` lines each time\n      .addCase(decrement, (state, action) => {})\n      // You can match a range of action types\n      .addMatcher(\n        isRejectedAction,\n        // `action` will be inferred as a RejectedAction\n        (state, action) => {}\n      )\n      // and provide a default case if no other handlers matched\n      .addDefaultCase((state, action) => {})\n  },\n})\n"})}),"\n",(0,s.jsx)(n.h2,{id:"selector",children:"Selector"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Keep the Redux state minimal,\nderive additional values from root state whenever possible."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The actual state is easier to read.\nLess logic is needed to calculate those additional values\nand keep them in sync with rest of data.\nThe original state is still there as a reference and isn't being replaced."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Extract data getting and normalization logic from components."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Making change to data format in reducers,\nthen change reusable selector in ",(0,s.jsx)(n.code,{children:"slice.ts"}),".\nNo need to change ",(0,s.jsx)(n.code,{children:"Component.tsx"})," logic."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Memorize state changes."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Keep ",(0,s.jsx)(n.code,{children:"useSelector"})," away from returns a new array reference:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// \u274c Bad: cause always re-render problem\nfunction App() {\n  const postsForUser = useSelector((state) => {\n    const allPosts = selectAllPosts(state)\n    // Returns a new array reference every time.\n    return allPosts.filter(post => post.user === userId)\n  })\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"useselector-hook",children:"UseSelector Hook"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"useSelector"})," automatically subscribes to Redux store,\nany time an action is dispatched,\nit will call its selector function again right away."]}),"\n",(0,s.jsxs)(n.p,{children:["If value returned by selector changes from last time it ran\n(",(0,s.jsxs)(n.strong,{children:["strict ",(0,s.jsx)(n.code,{children:"==="})," reference comparisons"]}),"),\n",(0,s.jsx)(n.code,{children:"useSelector"})," will force component to re-render with the new data."]}),"\n",(0,s.jsx)(n.h3,{id:"createselector-api",children:"CreateSelector API"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"createSelector"})," API\n(",(0,s.jsx)(n.a,{href:"https://github.com/reduxjs/reselect",children:"Reselect"})," under the hood):"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Takes one or more ",(0,s.jsx)(n.strong,{children:"Input Selector"})," functions,\nplus an ",(0,s.jsx)(n.strong,{children:"Output Selector"})," function as arguments."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Output Selector"})," will only re-run when outputs of ",(0,s.jsx)(n.code,{children:"Input Selector"})," have changed.\nWith ",(0,s.jsx)(n.code,{children:"createSelector"})," to write memorized selector functions:"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Input Selector"})," should usually just extract and return values,\n",(0,s.jsx)(n.code,{children:"Output Selector"})," should do expensive transformation work."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// Good\nconst selectAllPosts = state => state.posts.posts\nfunction selectPostById(state, postId) {\n  return state.posts.posts.find(post => post.id === postId)\n}\n\n// Memorized selector function\nconst selectPostsByUser = createSelector(\n  [selectAllPosts, (state, userId) => userId],\n  // Output selector will only re-run when `posts` or `userId` has changed.\n  (posts, userId) => posts.filter(post => post.user === userId)\n)\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Reselect"})," will run input selectors with all of given arguments,\nIf any of input selectors results are ",(0,s.jsx)(n.code,{children:"==="})," different than before,\nit will re-run output selector.\nOtherwise it will skip re-running and just return cached final result from before."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const state1 = getState()\n// Output selector runs, because it's the first call.\nselectPostsByUser(state1, 'user1')\n// Output selector does _not_ run, because the arguments haven't changed.\nselectPostsByUser(state1, 'user1')\n// Output selector runs, because `userId` changed.\nselectPostsByUser(state1, 'user2')\n\ndispatch(reactionAdded())\nconst state2 = getState()\n// Output selector does not run, because `posts` and `userId` are the same.\nselectPostsByUser(state2, 'user2')\n\n// Add some more posts.\ndispatch(addNewPost())\nconst state3 = getState()\n// Output selector runs, because `posts` has changed.\nselectPostsByUser(state3, 'user2')\n"})}),"\n",(0,s.jsx)(n.h3,{id:"selector-best-practice-and-pitfalls",children:"Selector Best Practice and Pitfalls"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// \u274c DO NOT memoize: will always return a consistent reference\nconst selectTodos = state => state.todos\nconst selectNestedValue = state => state.some.deeply.nested.field\nconst selectTodoById = (state, todoId) => state.todos[todoId]\n\n// \u274c DO NOT memoize: deriving data, but will return a consistent result\nfunction selectItemsTotal(state) {\n  return state.items.reduce((result, item) => {\n    return result + item.total\n  }, 0)\n}\nconst selectAllCompleted = state => state.todos.every(todo => todo.completed)\n\n// \u2705 SHOULD memoize: returns new references when called\nconst selectTodoDescriptions = state => state.todos.map(todo => todo.text)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"thunk",children:"Thunk"}),"\n",(0,s.jsxs)(n.p,{children:["Redux Toolkit ",(0,s.jsx)(n.code,{children:"configureStore"})," function automatically\nsets up the thunk middleware by default,\nrecommend using thunks as the standard approach for writing async logic with Redux."]}),"\n",(0,s.jsx)(n.h3,{id:"thunk-middleware-implementation",children:"Thunk Middleware Implementation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"function createThunkMiddleware(extraArgument) {\n  return ({ dispatch, getState }) =>\n    next =>\n      (action) => {\n        if (typeof action === 'function')\n          return action(dispatch, getState, extraArgument)\n\n        return next(action)\n      }\n}\n\nconst thunk = createThunkMiddleware()\nthunk.withExtraArgument = createThunkMiddleware\n\nexport default thunk\n"})}),"\n",(0,s.jsx)(n.h3,{id:"create-async-thunk-api",children:"Create Async Thunk API"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"createAsyncThunk"})," API provides:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Less boilerplate code for ",(0,s.jsx)(n.code,{children:"state.status"})," (",(0,s.jsx)(n.code,{children:"idle | loading | error"}),") manipulation."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Typed"})," async thunk function."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"AppThunk"})," type definition:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import type { Action, ThunkAction } from '@reduxjs/toolkit'\n\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Typed"})," async thunk function:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"interface SerializedError {\n  name?: string\n  message?: string\n  code?: string\n  stack?: string\n}\n\ninterface PendingAction<ThunkArg> {\n  type: string\n  payload: undefined\n  meta: {\n    requestId: string\n    arg: ThunkArg\n  }\n}\n\ninterface FulfilledAction<ThunkArg, PromiseResult> {\n  type: string\n  payload: PromiseResult\n  meta: {\n    requestId: string\n    arg: ThunkArg\n  }\n}\n\ninterface RejectedAction<ThunkArg> {\n  type: string\n  payload: undefined\n  error: SerializedError | any\n  meta: {\n    requestId: string\n    arg: ThunkArg\n    aborted: boolean\n    condition: boolean\n  }\n}\n\ninterface RejectedWithValueAction<ThunkArg, RejectedValue> {\n  type: string\n  payload: RejectedValue\n  error: { message: 'Rejected' }\n  meta: {\n    requestId: string\n    arg: ThunkArg\n    aborted: boolean\n  }\n}\n\ntype Pending = <ThunkArg>(\n  requestId: string,\n  arg: ThunkArg\n) => PendingAction<ThunkArg>\n\ntype Fulfilled = <ThunkArg, PromiseResult>(\n  payload: PromiseResult,\n  requestId: string,\n  arg: ThunkArg\n) => FulfilledAction<ThunkArg, PromiseResult>\n\ntype Rejected = <ThunkArg>(\n  requestId: string,\n  arg: ThunkArg\n) => RejectedAction<ThunkArg>\n\ntype RejectedWithValue = <ThunkArg, RejectedValue>(\n  requestId: string,\n  arg: ThunkArg\n) => RejectedWithValueAction<ThunkArg, RejectedValue>\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { createAsyncThunk } from '@reduxjs/toolkit'\n\nconst fetchUserById = createAsyncThunk<\n  // Return type of the payload creator\n  ReturnType,\n  // First argument to the payload creator\n  number,\n  {\n    // Optional fields for defining thunkApi field types\n    dispatch: AppDispatch\n    state: State\n    extra: {\n      jwt: string\n    }\n  }\n>('users/fetchById', async (userId, thunkApi) => {\n  const response = await fetch(`https://reqres.in/api/users/${userId}`, {\n    headers: {\n      Authorization: `Bearer ${thunkApi.extra.jwt}`,\n    },\n  })\n\n  return (await response.json()) as ReturnType\n})\n"})}),"\n",(0,s.jsx)(n.p,{children:"State status manipulation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { userAPI } from './userAPI'\n\n// First, create the thunk.\nconst fetchUserById = createAsyncThunk(\n  'users/fetchByIdStatus',\n  async (userId, thunkAPI) => {\n    const response = await userAPI.fetchById(userId)\n    return response.data\n  }\n)\n\n// Then, handle actions in your reducers:\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState: { entities: [], loading: 'idle' },\n  reducers: {\n    // Standard reducer logic, with auto-generated action types per reducer.\n  },\n  extraReducers: (builder) => {\n    // Add reducers for additional action types and handle loading state as needed.\n    builder.addCase(fetchUserById.fulfilled, (state, action) => {\n      // Add user to the state array.\n      state.entities.push(action.payload)\n    })\n  },\n})\n\n// Later, dispatch the thunk as needed in the app.\ndispatch(fetchUserById(123))\n"})}),"\n",(0,s.jsx)(n.h2,{id:"middleware",children:"Middleware"}),"\n",(0,s.jsx)(n.p,{children:"Redux middleware were designed to enable writing side effects logic:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"I/O: logging, saving files."}),"\n",(0,s.jsx)(n.li,{children:"AJAX HTTP request."}),"\n",(0,s.jsx)(n.li,{children:"Async timer."}),"\n",(0,s.jsxs)(n.li,{children:["Modifying state outside of ",(0,s.jsx)(n.code,{children:"reducer"})," function."]}),"\n",(0,s.jsxs)(n.li,{children:["Mutating arguments to ",(0,s.jsx)(n.code,{children:"dispatch"})," function."]}),"\n",(0,s.jsxs)(n.li,{children:["Generating random numbers or unique random IDs\n(e.g ",(0,s.jsx)(n.code,{children:"uuid()"}),"/",(0,s.jsx)(n.code,{children:"Math.random()"}),"/",(0,s.jsx)(n.code,{children:"Date.now()"}),")."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"middleware-basic-concepts",children:"Middleware Basic Concepts"}),"\n",(0,s.jsx)(n.p,{children:"\u6bcf\u4e00\u4e2a Middleware \u53ef\u4ee5\u901a\u8fc7\u4e0a\u4e0b\u6587\u83b7\u53d6:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["original ",(0,s.jsx)(n.code,{children:"store"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["original ",(0,s.jsx)(n.code,{children:"store.dispatch"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["get state by ",(0,s.jsx)(n.code,{children:"store.getState"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["\u901a\u8fc7 ",(0,s.jsx)(n.code,{children:"dispatch"})," \u5bf9\u8c61\u76f4\u63a5\u53d1\u5e03 ",(0,s.jsx)(n.code,{children:"action"})," \u5bf9\u8c61."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"next"})," \u65b9\u6cd5: \u524d\u4e00\u4e2a Middleware \u8fd4\u56de\u7684 ",(0,s.jsx)(n.code,{children:"dispatch"})," \u65b9\u6cd5.\n\u5f53\u524d Middleware \u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u5bf9 action \u7684\u5224\u65ad\u548c\u5904\u7406\u7ed3\u679c,\n\u51b3\u5b9a\u662f\u5426\u8c03\u7528 ",(0,s.jsx)(n.code,{children:"next"})," \u65b9\u6cd5 (\u662f\u5426\u8df3\u8fc7\u5176\u4ed6 Middleware \u7684 ",(0,s.jsx)(n.code,{children:"dispatch"}),"),\n\u4ee5\u53ca\u4f20\u5165\u4ec0\u4e48\u6837\u7684\u53c2\u6570."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"\u4ece\u800c\u5b9e\u73b0\u5982\u4e0b\u529f\u80fd:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Execute extra logic when any action is dispatched."}),"\n",(0,s.jsx)(n.li,{children:"Pause, modify, delay, replace, or halt dispatched actions."}),"\n",(0,s.jsxs)(n.li,{children:["Write extra code that has access to ",(0,s.jsx)(n.code,{children:"dispatch"})," and ",(0,s.jsx)(n.code,{children:"getState"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Teach ",(0,s.jsx)(n.code,{children:"dispatch"})," how to accept other values besides plain action objects,\nsuch as ",(0,s.jsx)(n.strong,{children:"functions"})," (",(0,s.jsx)(n.code,{children:"action(dispatch, getState, extraArgument)"}),") and promises,\nby intercepting them and dispatching real action objects instead."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"middleware-simple-implementation",children:"Middleware Simple Implementation"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Raw Middleware: ",(0,s.jsx)(n.code,{children:"store => next => action => T"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"middleware(store)"}),": ",(0,s.jsx)(n.code,{children:"next => action => T"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"middleware(store)(next)"}),": ",(0,s.jsx)(n.code,{children:"action => T"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"next"}),": ",(0,s.jsx)(n.code,{children:"action => T"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"dispatch"}),": ",(0,s.jsx)(n.code,{children:"action => T"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"middleware(store)(next)"}),", ",(0,s.jsx)(n.code,{children:"next"})," and ",(0,s.jsx)(n.code,{children:"dispatch"})," have same function signature:\n",(0,s.jsx)(n.code,{children:"type Dispatch = (action: Action | AsyncAction) => any"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["After ",(0,s.jsx)(n.code,{children:"middlewares.forEach"}),", set ",(0,s.jsx)(n.code,{children:"next"})," to ",(0,s.jsx)(n.code,{children:"store.dispatch"}),",\nmake new ",(0,s.jsx)(n.code,{children:"dispatch"})," get all functions from ",(0,s.jsx)(n.code,{children:"middlewares"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"function applyMiddleware(store, middlewares) {\n  middlewares = middlewares.slice()\n  middlewares.reverse()\n\n  let next = store.dispatch\n  // Reduce middlewares with reverse order in Redux.\n  middlewares.forEach(middleware => (next = middleware(store)(next)))\n\n  // When user app execute `dispatch` function,\n  // middlewares execute with forward order.\n  return Object.assign({}, store, { dispatch: next })\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { applyMiddleware, combineReducers, createStore } from 'redux'\n\n// applyMiddleware takes createStore() and returns\n// a function with a compatible API.\nconst createStoreWithMiddleware = applyMiddleware(\n  logger,\n  crashReporter\n)(createStore)\n\n// Use it like you would use createStore()let todoApp = combineReducers(reducers);\nconst store = createStoreWithMiddleware(todoApp)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"scheduler-middleware",children:"Scheduler Middleware"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"/**\n * Schedules actions with { meta: { delay: N } } to be delayed by N milliseconds.\n * Makes `dispatch` return a function to cancel the interval in this case.\n */\nfunction timeoutScheduler(store) {\n  return next => (action) => {\n    if (!action.meta || !action.meta.delay)\n      return next(action)\n\n    const intervalId = setTimeout(() => next(action), action.meta.delay)\n\n    return function cancel() {\n      clearInterval(intervalId)\n    }\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"thunk-middleware",children:"Thunk Middleware"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// thunk middleware\nfunction thunk(store) {\n  return next => action =>\n    typeof action === 'function'\n      ? action(store.dispatch, store.getState)\n      : next(action)\n}\n\nconst createStoreWithMiddleware = applyMiddleware(\n  logger,\n  thunk,\n  timeoutScheduler\n)(createStore)\nconst store = createStoreWithMiddleware(combineReducers(reducers))\n\nfunction addFave(tweetId) {\n  return (dispatch, getState) => {\n    if (getState.tweets[tweetId] && getState.tweets[tweetId].liked)\n      return\n\n    dispatch({ type: IS_LOADING })\n    // Yay, that could be sync or async dispatching\n    remote.addFave(tweetId).then(\n      (res) => {\n        dispatch({ type: ADD_FAVE_SUCCEED })\n      },\n      (err) => {\n        dispatch({ type: ADD_FAVE_FAILED, err })\n      }\n    )\n  }\n}\n\nstore.dispatch(addFave())\n"})}),"\n",(0,s.jsx)(n.h3,{id:"typed-middleware",children:"Typed Middleware"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"export interface Middleware<\n  DispatchExt = object,\n  S = any,\n  D extends Dispatch = Dispatch, // type of the dispatch method\n> {\n  ext: DispatchExt\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import type { Middleware } from 'redux'\nimport type { RootState } from '../store'\n\nexport const exampleMiddleware: Middleware<\n  object, // Most middleware do not modify the dispatch return value\n  RootState\n> = store => next => (action) => {\n  const state = store.getState() // correctly typed as RootState\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"rtk-query",children:"RTK Query"}),"\n",(0,s.jsx)(n.h3,{id:"server-state-management",children:"Server State Management"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Tracking loading state in order to show UI spinners."}),"\n",(0,s.jsx)(n.li,{children:"Avoiding duplicate requests for the same data."}),"\n",(0,s.jsxs)(n.li,{children:["Optimistic updates to make the UI feel faster","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Requires asynchronous APIs for fetching and updating."}),"\n",(0,s.jsxs)(n.li,{children:["Updating ",(0,s.jsx)(n.code,{children:"out of date"})," data in the background."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Managing cache lifetimes as the user interacts with the UI."}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://redux-toolkit.js.org/rtk-query/overview",children:"RTK Query"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/tannerlinsley/react-query",children:"React Query"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"basic-rtk-query-usage",children:"Basic RTK Query Usage"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Query hooks."}),"\n",(0,s.jsx)(n.li,{children:"Mutation hooks."}),"\n",(0,s.jsx)(n.li,{children:"Refetch function."}),"\n",(0,s.jsx)(n.li,{children:"Cache tags."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// Import the RTK Query methods from the React-specific entry point.\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n\n// Define our single API slice object.\nexport const apiSlice = createApi({\n  // The cache reducer expects to be added at `state.api`.\n  reducerPath: 'api',\n  // All of our requests will have URLs starting with '/fakeApi'.\n  baseQuery: fetchBaseQuery({ baseUrl: '/fakeApi' }),\n  tagTypes: ['Post'],\n  // The \"endpoints\" represent operations and requests for this server.\n  endpoints: builder => ({\n    getPost: builder.query({\n      query: postId => `/posts/${postId}`,\n    }),\n    // The `getPosts` endpoint is a \"query\" operation that returns data.\n    getPosts: builder.query({\n      // The URL for the request is '/fakeApi/posts'.\n      query: () => '/posts',\n      providesTags: ['Post'],\n    }),\n    addNewPost: builder.mutation({\n      query: initialPost => ({\n        url: '/posts',\n        method: 'POST',\n        // Include the entire post object as the body of the request\n        body: initialPost,\n      }),\n      invalidatesTags: ['Post'],\n    }),\n  }),\n})\n\n// Export the auto-generated hook for the `getPost` query endpoint\nexport const { useGetPostQuery, useGetPostsQuery, useAddNewPostMutation }\n  = apiSlice\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { apiSlice } from '../features/api/apiSlice'\n\nexport default configureStore({\n  reducer: {\n    // ... Other reducers.\n    [apiSlice.reducerPath]: apiSlice.reducer,\n  },\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware().concat(apiSlice.middleware),\n})\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'import { useGetPostsQuery } from \'../api\'\nimport { PostExcerpt, Spinner } from \'../components\'\n\nexport function PostsList() {\n  const {\n    data: posts = [],\n    isLoading,\n    isSuccess,\n    isError,\n    error,\n    refetch,\n  } = useGetPostsQuery()\n\n  const sortedPosts = useMemo(\n    () => posts.slice().sort((a, b) => b.date.localeCompare(a.date)),\n    [posts]\n  )\n\n  let content\n\n  if (isLoading)\n    content = <Spinner text="Loading..." />\n  else if (isSuccess)\n    content = sortedPosts.map(post => <PostExcerpt key={post.id} post={post} />)\n  else if (isError)\n    content = <div>{error.toString()}</div>\n\n  return (\n    <section className="posts-list">\n      <h2>Posts</h2>\n      <button type="button" onClick={refetch}>Refetch Posts</button>\n      {content}\n    </section>\n  )\n}\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { useState } from 'react'\nimport { useAddNewPostMutation } from '../api'\n\nexport function AddPostForm() {\n  const [title, setTitle] = useState('')\n  const [content, setContent] = useState('')\n  const [userId, setUserId] = useState('')\n\n  const [addNewPost, { isLoading }] = useAddNewPostMutation()\n\n  const canSave = [title, content, userId].every(Boolean) && !isLoading\n\n  const onSavePostClicked = async () => {\n    if (canSave) {\n      try {\n        await addNewPost({ title, content, user: userId }).unwrap()\n        setTitle('')\n        setContent('')\n        setUserId('')\n      } catch (err) {\n        console.error('Failed to save the post: ', err)\n      }\n    }\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"rtk-query-cache-mechanism",children:"RTK Query Cache Mechanism"}),"\n",(0,s.jsxs)(n.p,{children:["RTK Query creates a ",(0,s.jsx)(n.strong,{children:"cache key"})," for each ",(0,s.jsx)(n.code,{children:"unique endpoint"})," + ",(0,s.jsx)(n.code,{children:"argument"})," combination,\nand stores the results for each cache key separately."]}),"\n",(0,s.jsxs)(n.p,{children:["Use the same query hook multiple times,\npass it different query parameters,\nand each result will be cached separately in Redux ",(0,s.jsx)(n.code,{children:"store"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["It iss important to note that the query parameter must be a ",(0,s.jsx)(n.strong,{children:"single value"}),"\n(a primitive value or an object containing multiple fields, same as with ",(0,s.jsx)(n.code,{children:"createAsyncThunk"}),").\nRTK Query will do ",(0,s.jsx)(n.strong,{children:"shallow stable"})," comparison of fields,\nand re-fetch the data if any of them have changed."]}),"\n",(0,s.jsxs)(n.p,{children:["By default, ",(0,s.jsx)(n.strong,{children:"unused data is removed from the cache after 60 seconds"}),",\ncan be configured in root API slice definition\nor overridden in individual endpoint definitions using ",(0,s.jsx)(n.code,{children:"keepUnusedDataFor"})," flag."]}),"\n",(0,s.jsxs)(n.p,{children:["RTK query ",(0,s.jsx)(n.a,{href:"https://redux-toolkit.js.org/rtk-query/api/created-api/cache-management-utils",children:"cache utils"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"export const apiSlice = createApi({\n  reducerPath: 'api',\n  baseQuery: fetchBaseQuery({ baseUrl: '/fakeApi' }),\n  tagTypes: ['Post'],\n  endpoints: builder => ({\n    getPosts: builder.query({\n      query: () => '/posts',\n      providesTags: (result = [], error, arg) => [\n        'Post',\n        ...result.map(({ id }) => ({ type: 'Post', id })),\n      ],\n    }),\n    getPost: builder.query({\n      query: postId => `/posts/${postId}`,\n      providesTags: (result, error, arg) => [{ type: 'Post', id: arg }],\n    }),\n    addNewPost: builder.mutation({\n      query: initialPost => ({\n        url: '/posts',\n        method: 'POST',\n        body: initialPost,\n      }),\n      invalidatesTags: ['Post'],\n    }),\n    editPost: builder.mutation({\n      query: post => ({\n        url: `posts/${post.id}`,\n        method: 'PATCH',\n        body: post,\n      }),\n      invalidatesTags: (result, error, arg) => [{ type: 'Post', id: arg.id }],\n    }),\n  }),\n})\n"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"PATCH /posts/:postId"})," from the editPost mutation."]}),"\n",(0,s.jsxs)(n.li,{children:["A ",(0,s.jsx)(n.code,{children:"GET /posts/:postId"})," as the getPost query is refetched."]}),"\n",(0,s.jsxs)(n.li,{children:["A ",(0,s.jsx)(n.code,{children:"GET /posts"})," as the getPosts query is refetched."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"rtk-query-selector",children:"RTK Query Selector"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import {\n  createEntityAdapter,\n  createSelector,\n  createSlice,\n} from '@reduxjs/toolkit'\nimport { apiSlice } from '../api/apiSlice'\n\nconst emptyUsers = []\n\nexport const selectUsersResult = apiSlice.endpoints.getUsers.select()\n\nexport const selectAllUsers = createSelector(\n  selectUsersResult,\n  usersResult => usersResult?.data ?? emptyUsers\n)\n\nexport const selectUserById = createSelector(\n  selectAllUsers,\n  (state, userId) => userId,\n  (users, userId) => users.find(user => user.id === userId)\n)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"splitting-query-endpoints",children:"Splitting Query Endpoints"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://redux-toolkit.js.org/rtk-query/usage/code-splitting",children:"RTK query code splitting"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"injectEndpoints()"}),":\nmutates original API slice object\nto add additional endpoint definitions\nand then returns it."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"enhanceEndpoints()"}),":\nmerged together on a per-definition basis."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"apiSlice"})," and ",(0,s.jsx)(n.code,{children:"extendedApiSlice"})," are the same object."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { apiSlice } from '../api/apiSlice'\n\nexport const extendedApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getUsers: builder.query({\n      query: () => '/users',\n    }),\n  }),\n})\n\nexport const { useGetUsersQuery } = extendedApiSlice\n\nexport const selectUsersResult = extendedApiSlice.endpoints.getUsers.select()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"transform-query-response",children:"Transform Query Response"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { apiSlice } from '../api/apiSlice'\n\nconst usersAdapter = createEntityAdapter()\n\nconst initialState = usersAdapter.getInitialState()\n\nexport const extendedApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getUsers: builder.query({\n      query: () => '/users',\n      transformResponse: (responseData) => {\n        return usersAdapter.setAll(initialState, responseData)\n      },\n    }),\n  }),\n})\n\nexport const { useGetUsersQuery } = extendedApiSlice\n\nconst selectUsersResult = extendedApiSlice.endpoints.getUsers.select()\n\nconst selectUsersData = createSelector(\n  selectUsersResult,\n  usersResult => usersResult.data\n)\n\nexport const { selectAll: selectAllUsers, selectById: selectUserById }\n  = usersAdapter.getSelectors(state => selectUsersData(state) ?? initialState)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"rtk-query-reference",children:"RTK Query Reference"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["RTK Query real world ",(0,s.jsx)(n.a,{href:"https://www.toptal.com/react/redux-toolkit-and-rtk-query",children:"example"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"react-redux-binding-library",children:"React Redux Binding Library"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"useSelector"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"useDispatch"}),":\ndispatch function reference will be stable\nas long as same store instance is being passed to the ",(0,s.jsx)(n.code,{children:"<Provider>"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"typed-react-redux-hooks",children:"Typed React Redux Hooks"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import type { TypedUseSelectorHook } from 'react-redux'\nimport type store from './store'\nimport { useDispatch, useSelector } from 'react-redux'\n\ntype AppDispatch = typeof store.dispatch\ntype RootState = ReturnType<typeof store.getState>\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n"})}),"\n",(0,s.jsx)(n.h3,{id:"custom-react-redux-hooks",children:"Custom React Redux Hooks"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { shallowEqual, useSelector } from 'react-redux'\n\nexport default function useShallowEqualSelector(selector) {\n  return useSelector(selector, shallowEqual)\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { useMemo } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { bindActionCreators } from 'redux'\n\nexport default function useActions(actions) {\n  const dispatch = useDispatch()\n\n  return useMemo(() => {\n    if (Array.isArray(actions))\n      return actions.map(a => bindActionCreators(a, dispatch))\n\n    return bindActionCreators(actions, dispatch)\n  }, [actions, dispatch])\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"react-redux-api-reference",children:"React Redux API Reference"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://react-redux.js.org/api/batch",children:(0,s.jsx)(n.code,{children:"batch"})}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { batch } from 'react-redux'\n\nfunction myThunk() {\n  return (dispatch, getState) => {\n    // Only result in one combined re-render, not two.\n    batch(() => {\n      dispatch(increment())\n      dispatch(increment())\n    })\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"redux-server-side-rendering",children:"Redux Server Side Rendering"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Client side:\na new Redux store will be created with state provided from server."}),"\n",(0,s.jsx)(n.li,{children:"Server side:\nprovide the initial state of app."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"client.jsx"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { hydrateRoot } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport App from './containers/App'\nimport counterApp from './reducers'\n\nconst preloadedState = window.__PRELOADED_STATE__\n\ndelete window.__PRELOADED_STATE__\n\nconst store = createStore(counterApp, preloadedState)\n\nhydrateRoot(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"server.js"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import path from 'node:path'\nimport Express from 'express'\nimport qs from 'qs'\nimport { renderToString } from 'react-dom/server'\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport App from './containers/App'\nimport counterApp from './reducers'\n\nconst app = Express()\nconst port = 3000\n\napp.use('/static', Express.static('static'))\n\napp.use(handleRender)\n\nfunction handleRender(req, res) {\n  // `parseInt` to prevent XSS attack\n  const params = qs.parse(req.query)\n  const counter = Number.parseInt(params.counter, 10) || 0\n\n  const preloadedState = { counter }\n  const store = createStore(counterApp, preloadedState)\n\n  const html = renderToString(\n    <Provider store={store}>\n      <App />\n    </Provider>\n  )\n\n  const finalState = store.getState()\n  res.send(renderFullPage(html, finalState))\n}\n\nfunction renderFullPage(html, preloadedState) {\n  // https://redux.js.org/usage/server-rendering#security-considerations\n  // `replace(/</g, '\\\\u003c')` to prevent XSS attack\n  return `\n    <!doctype html>\n    <html>\n      <head>\n        <title>Redux Universal Example</title>\n      </head>\n      <body>\n        <div id=\"root\">${html}</div>\n        <script>\n          // WARNING: security issues around embedding JSON in HTML:\n          // https://redux.js.org/usage/server-rendering#security-considerations\n          window.__PRELOADED_STATE__ = ${JSON.stringify(preloadedState).replace(\n            /</g,\n            '\\\\u003c'\n          )}\n        <\/script>\n        <script src=\"/static/bundle.js\"><\/script>\n      </body>\n    </html>\n    `\n}\n\napp.listen(port)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"redux-internal",children:"Redux Internal"}),"\n",(0,s.jsx)(n.h3,{id:"store-constructor-implementation",children:"Store Constructor Implementation"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use closure to store state and subscribe."}),"\n",(0,s.jsx)(n.li,{children:"Use middleware to change normal dispatch function."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"function applyMiddleware(...middlewares) {\n  return (store) => {\n    // should return (next) => (action) => { ... } function\n    if (middlewares.length === 0)\n      return dispatch => dispatch\n\n    if (middlewares.length === 1)\n      return middlewares[0]\n\n    // [ (next) => (action) => {...}, ... ] array\n    // next: (action) => { ... } function\n    const boundMiddlewares = middlewares.map(middleware => middleware(store))\n\n    return boundMiddlewares.reduce((a, b) => next => a(b(next)))\n  }\n}\n\nfunction createStore(reducer, middleware) {\n  // closure for storing global state\n  let state\n  const subscribers = []\n  const coreDispatch = (action) => {\n    validateAction(action)\n    state = reducer(state, action)\n    subscribers.forEach(handler => handler())\n  }\n  const getState = () => state\n\n  const store = {\n    dispatch: coreDispatch,\n    getState,\n    subscribe: (handler) => {\n      subscribers.push(handler)\n\n      // unsubscribe function\n      return () => {\n        const index = subscribers.indexOf(handler)\n\n        if (index > 0)\n          subscribers.splice(index, 1)\n      }\n    },\n  }\n\n  if (middleware) {\n    // store default dispatch\n    const dispatch = action => store.dispatch(action)\n\n    // middleware = ({ dispatch, getState }) => (next) => (action) => { ... };\n    // middleware is a higher-order function (return (action) => { ... });\n    // dispatch, getState and coreDispatch are injected into middleware as arguments\n    store.dispatch = middleware({\n      dispatch,\n      getState,\n    })(coreDispatch)\n  }\n\n  coreDispatch({\n    type: INIT_REDUX,\n  })\n  return store\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"action-validation",children:"Action Validation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"function isValidKey(key) {\n  return ['type', 'payload', 'error', 'meta'].includes(key)\n}\n\nfunction validateAction(action) {\n  if (!action || typeof action !== 'object' || Array.isArray(action))\n    throw new Error('Action must be an object!')\n\n  if (typeof action.type === 'undefined')\n    throw new TypeError('Action must have a type!')\n\n  if (!Object.keys(action).every(isValidKey)) {\n    throw new Error(\n      'Action only have `type`, `payload`, `error` or `meta` field!'\n    )\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"provider-and-connection",children:"Provider and Connection"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["use Context to provide store (two methods):","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"inject store into every children recursively"}),"\n",(0,s.jsxs)(n.li,{children:["use Consumer in Connect higher order component\n",(0,s.jsx)(n.code,{children:"<Consumer>{store => (<WrapperComponent store={store}>)}</Consumer>"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"interface Store {\n  getState: Function\n  subscribe: Function\n  dispatch: Function\n}\n\nexport function Provider({\n  store,\n  children,\n}: {\n  store: Store\n  children: ReactElement\n}) {\n  const StoreContext = React.createContext(store)\n\n  return (\n    <StoreContext value={store}>\n      <StoreContext.Consumer>\n        {(store) => {\n          const childrenWithStore = React.Children.map(children, child =>\n            React.cloneElement(child, { store }))\n\n          return <div>{childrenWithStore}</div>\n        }}\n      </StoreContext.Consumer>\n    </StoreContext>\n  )\n}\n\nfunction connect(\n  mapStateToProps = () => ({}),\n  mapDispatchToProps = () => ({})\n) {\n  return (Component) => {\n    class Connected extends React.Component<{ store: Store }> {\n      onStoreOrPropsChange(props) {\n        const { store } = this.props\n        const state = store.getState()\n        const stateProps = mapStateToProps(state, props)\n        const dispatchProps = mapDispatchToProps(store.dispatch, props)\n        this.setState({\n          ...stateProps,\n          ...dispatchProps,\n        })\n      }\n\n      UNSAFE_componentWillMount() {\n        const { store } = this.props\n        this.onStoreOrPropsChange(this.props)\n        this.unsubscribe = store.subscribe(() =>\n          this.onStoreOrPropsChange(this.props)\n        )\n      }\n\n      UNSAFE_componentWillReceiveProps(nextProps) {\n        this.onStoreOrPropsChange(nextProps)\n      }\n\n      componentWillUnmount() {\n        this.unsubscribe()\n      }\n\n      render() {\n        return <Component {...this.props} {...this.state} />\n      }\n    }\n\n    return Connected\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"redux-performance",children:"Redux Performance"}),"\n",(0,s.jsx)(n.h3,{id:"redux-code-splitting",children:"Redux Code Splitting"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://redux.js.org/usage/code-splitting",children:"Redux Code Splitting Guide"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/microsoft/redux-dynamic-modules",children:"Redux Dynamic Modules"}),":\nModularize Redux by dynamically loading reducers and middlewares\n(contribute to ",(0,s.jsx)(n.strong,{children:"code splitting"}),")."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"redux-performance-pitfalls",children:"Redux Performance Pitfalls"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["All ",(0,s.jsx)(n.code,{children:"reducers"})," are called to produce the ",(0,s.jsx)(n.code,{children:"next"})," store state."]}),"\n",(0,s.jsxs)(n.li,{children:["All ",(0,s.jsx)(n.code,{children:"mapStateToProps"}),"/",(0,s.jsx)(n.code,{children:"useSelectors"})," of mounted components are called."]}),"\n",(0,s.jsxs)(n.li,{children:["As every ",(0,s.jsx)(n.code,{children:"mapStateToProps"}),"/",(0,s.jsx)(n.code,{children:"useSelector"}),"\nthat returned a different reference\nfrom the previous render,\nthe associated components are rendered\n(",(0,s.jsx)(n.strong,{children:"re-rendering"})," problem)."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"redux-performance-best-practice",children:"Redux Performance Best Practice"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Normal React performance tips: ",(0,s.jsx)(n.code,{children:"React.memo"}),", ",(0,s.jsx)(n.code,{children:"useMemo"}),", ",(0,s.jsx)(n.code,{children:"useCallback"})," etc."]}),"\n",(0,s.jsxs)(n.li,{children:["Normalize large array state via ",(0,s.jsx)(n.code,{children:"createEntityAdapter"})," API:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"Ids"})," array as minimal core data (other than whole ",(0,s.jsx)(n.code,{children:"Data[]"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:["Fast element lookup in normalized state (other than slow ",(0,s.jsx)(n.code,{children:"Array.find()"}),")."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Create memorized selectors via ",(0,s.jsx)(n.code,{children:"createSelector"})," API."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"redux-best-practice",children:"Redux Best Practice"}),"\n",(0,s.jsx)(n.h3,{id:"redux-necessity",children:"Redux Necessity"}),"\n",(0,s.jsx)(n.p,{children:"Necessity for importing Redux\n(\u72b6\u6001\u591a, \u53d8\u5316\u5feb, \u66f4\u65b0\u590d\u6742):"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Lots of state."}),"\n",(0,s.jsx)(n.li,{children:"Frequent update state."}),"\n",(0,s.jsx)(n.li,{children:"Complex update state."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"redux-style-guide",children:"Redux Style Guide"}),"\n",(0,s.jsxs)(n.p,{children:["Redux style ",(0,s.jsx)(n.a,{href:"https://redux.js.org/style-guide/style-guide",children:"guide"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Only one store per app."}),"\n",(0,s.jsx)(n.li,{children:"Avoid mutate state without ImmerJS."}),"\n",(0,s.jsx)(n.li,{children:"Avoid side effects in reducers."}),"\n",(0,s.jsx)(n.li,{children:"Avoid non-serializable values in state store."}),"\n",(0,s.jsx)(n.li,{children:"Normalize complex nested/relational state."}),"\n",(0,s.jsx)(n.li,{children:"Keep state minimal and derive additional values."}),"\n",(0,s.jsxs)(n.li,{children:["Split large data selection into multiple small ",(0,s.jsx)(n.code,{children:"useSelector"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"redux-tips",children:"Redux Tips"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u533a\u5206 Smart Component (know the state) \u548c Dump Component (stateless)"}),"\n",(0,s.jsx)(n.li,{children:"Component \u91cc\u4e0d\u8981\u51fa\u73b0\u4efb\u4f55 async calls\uff0c\u4ea4\u7ed9 action creator \u6765\u505a"}),"\n",(0,s.jsx)(n.li,{children:"Reducer \u5c3d\u91cf\u7b80\u5355\uff0c\u590d\u6742\u7684\u4ea4\u7ed9 action creator"}),"\n",(0,s.jsx)(n.li,{children:"Reducer \u91cc return \u65b0 state \u7684\u65f6\u5019\uff1a"}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/gaearon/redux-devtools",children:"Redux Devtools"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/iraycd/React-Redux-Styleguide",children:"Redux React Style Guide"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/rematch/rematch",children:"Simple Redux API"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'// add new item to state array\n// bad and does not work case "ADD":\nstate.push(newItem)\n// Good case "ADD":\nreturn [...state, newItem]\n\n// delete new item to state array\n// bad and does not work case "DELETE":\nstate.splice(index, 1)\n// Good case "DELETE":\nstate.slice(0, index).concat(state.slice(index + 1))\n\n// update new item to state array\n// First way case "EDIT":\nstate\n  .slice(0, index)\n  .concat([{ id: \'id\', value: \'newValue\' }])\n  .slice(index + 1)\n// Second way case "EDIT":\nstate.map((item) => {\n  if (item.id === \'id\') {\n    return {\n      ...item,\n      value: \'newValue\',\n    }\n  } else {\n    return item\n  }\n})\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Action creator: \u7528 promise/async/await \u4ee5\u53ca redux-thunk \u5b9e\u73b0\u5f02\u6b65\u64cd\u4f5c."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// bad\nfunction loadTodo(id) {\n  return async (dispatch, getState) => {\n    // only fetch the todo if it isn't already loaded\n    if (!getState().todos.includes(id)) {\n      const todo = await fetch(`/todos/${id}`)\n      dispatch(addTodo(todo))\n    }\n  }\n}\n\n// good\nfunction loadTodo(id, todos) {\n  return async (dispatch) => {\n    // only fetch the todo if it isn't already loaded\n    if (!todos.includes(id)) {\n      const todo = await fetch(`/todos/${id}`)\n      dispatch(addTodo(todo))\n    }\n  }\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const fluxStandardAction = {\n  type: 'ADD_TODO',\n  payload: {\n    text: 'Do something',\n  },\n  meta,\n}\n\nconst fluxStandardAction = {\n  type: 'ADD_TODO',\n  payload: new Error('Error'),\n  error: true,\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"state-management",children:"State Management"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Redux for global state:\n\u4f5c\u4e3a\u5168\u5c40\u72b6\u6001\u7ba1\u7406."}),"\n",(0,s.jsx)(n.li,{children:"RxJS for redux middleware:\nRxJS \u7ba1\u7406\u6240\u6709\u8f93\u5165\u7684 input -> redux action \u7684\u8c03\u5ea6\u8fc7\u7a0b."}),"\n",(0,s.jsxs)(n.li,{children:["Mobx and ",(0,s.jsx)(n.code,{children:"useState"})," for component state:\n\u4f5c\u4e3a\u7ec4\u4ef6\u5c40\u90e8\u72b6\u6001\u7ba1\u7406\u5668\u6765\u7528.\n\u5bf9\u4e8e\u53ea\u5f71\u54cd\u5355\u4e2a\u7ec4\u4ef6\u5b9e\u4f8b\u7684\u72b6\u6001,\n\u5e94\u4f5c\u4e3a Local State \u4ea4\u7531 ",(0,s.jsx)(n.code,{children:"useState"})," \u7ba1\u7406,\n\u800c\u4e0d\u662f\u5c06\u5176\u5e76\u5165 Global Store."]}),"\n",(0,s.jsx)(n.li,{children:"Complex UI Change: \u7528 component \u5f52\u4e00\u5316\u5904\u7406"}),"\n",(0,s.jsx)(n.li,{children:"Complex Data Input: \u7528 RxJS/observable \u5f52\u4e00\u5316\u5904\u7406"}),"\n",(0,s.jsx)(n.li,{children:"Complex State Change: \u7528 action/state \u5f52\u4e00\u5316\u5904\u7406"}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Jotai"}),"/",(0,s.jsx)(n.code,{children:"Recoil"}),":\nSplit state into different atoms.\nAtoms can be imported for any specific component ",(0,s.jsx)(n.strong,{children:"without single-entry point"}),".\nEach atom handling different app domain/context (reducer)."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"redux-tools",children:"Redux Tools"}),"\n",(0,s.jsx)(n.h3,{id:"immutable-data-tools",children:"Immutable Data Tools"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"ImmerJS."}),"\n",(0,s.jsx)(n.li,{children:"Immutable.js: decrease useless copy and memory occupation."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"middleware-tools",children:"Middleware Tools"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/reduxjs/redux-thunk",children:"Redux Thunk"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/yelouafi/redux-saga",children:"Redux Sage"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/acdlite/redux-promise",children:"Redux Promise"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/fcomb/redux-diff-logger",children:"Redux Diff Logger"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/microsoft/redux-dynamic-modules",children:"Redux Dynamic Modules"}),":\nModularize Redux by dynamically loading reducers and middlewares\n(contribute to ",(0,s.jsx)(n.strong,{children:"code splitting"}),")."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"state-tools",children:"State Tools"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Reselect: memorize state transformation."}),"\n",(0,s.jsx)(n.li,{children:"Redux undo."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"debugging-tools",children:"Debugging Tools"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/gaearon/redux-devtools",children:"Redux Devtools"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"redux-reference",children:"Redux Reference"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Redux ToolKit quick start ",(0,s.jsx)(n.a,{href:"https://redux.js.org/tutorials/fundamentals/part-8-modern-redux",children:"guide"}),"."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},842:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(8101);const s={},i=r.createContext(s);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);