"use strict";(self.webpackChunkawesome_notes=self.webpackChunkawesome_notes||[]).push([[7599],{649:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>t,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"ComputerScience/Database/DatabaseBasicNotes","title":"Database Basic Notes","description":"Basic Concepts","source":"@site/notes/ComputerScience/Database/DatabaseBasicNotes.md","sourceDirName":"ComputerScience/Database","slug":"/ComputerScience/Database/DatabaseBasicNotes","permalink":"/awesome-notes/ComputerScience/Database/DatabaseBasicNotes","draft":false,"unlisted":false,"editUrl":"https://github.com/sabertazimi/awesome-notes/edit/main/notes/ComputerScience/Database/DatabaseBasicNotes.md","tags":[{"inline":true,"label":"CS","permalink":"/awesome-notes/tags/cs"},{"inline":true,"label":"Database","permalink":"/awesome-notes/tags/database"}],"version":"current","lastUpdatedBy":"sabertazimi","lastUpdatedAt":1712724461000,"frontMatter":{"author":"Sabertazimi","authorTitle":"Web Developer","authorURL":"https://github.com/sabertazimi","authorImageURL":"https://github.com/sabertazimi.png","tags":["CS","Database"]},"sidebar":"tutorialSidebar","previous":{"title":"Compiler Basic Notes","permalink":"/awesome-notes/ComputerScience/Compilers/CompilersBasicNotes"},"next":{"title":"LaTeX Basic Notes","permalink":"/awesome-notes/ComputerScience/LaTeX/LaTeXBasicNotes"}}');var l=s(5105),a=s(842);const r={author:"Sabertazimi",authorTitle:"Web Developer",authorURL:"https://github.com/sabertazimi",authorImageURL:"https://github.com/sabertazimi.png",tags:["CS","Database"]},o="Database Basic Notes",t={},d=[{value:"Basic Concepts",id:"basic-concepts",level:2},{value:"Feature",id:"feature",level:3},{value:"Common Words",id:"common-words",level:3},{value:"Data Format",id:"data-format",level:2},{value:"XML",id:"xml",level:3},{value:"DTD",id:"dtd",level:4},{value:"XSD",id:"xsd",level:4},{value:"JSON",id:"json",level:3},{value:"Relational Algebra",id:"relational-algebra",level:2},{value:"Operators",id:"operators",level:3},{value:"Higher-Level Database Design Models",id:"higher-level-database-design-models",level:2},{value:"UML",id:"uml",level:3},{value:"Classes",id:"classes",level:4},{value:"Associations",id:"associations",level:4},{value:"Associations Classes",id:"associations-classes",level:4},{value:"Subclasses",id:"subclasses",level:4},{value:"Composition and Aggregation",id:"composition-and-aggregation",level:4},{value:"Entity Relationship Model",id:"entity-relationship-model",level:3},{value:"SQL",id:"sql",level:2},{value:"Relational Design",id:"relational-design",level:2},{value:"Decomposition",id:"decomposition",level:3},{value:"functional dependencies",id:"functional-dependencies",level:3},{value:"BCNF",id:"bcnf",level:3},{value:"Multi Valued Dependencies",id:"multi-valued-dependencies",level:3},{value:"4NF",id:"4nf",level:3},{value:"Normalized Design",id:"normalized-design",level:3},{value:"Indexes",id:"indexes",level:2},{value:"Transactions",id:"transactions",level:2},{value:"Transaction Standard",id:"transaction-standard",level:3},{value:"ACID Properties",id:"acid-properties",level:3},{value:"Isolation Level",id:"isolation-level",level:4},{value:"Integrity Constraints",id:"integrity-constraints",level:2},{value:"Triggers (DBMS Level Constraints)",id:"triggers-dbms-level-constraints",level:2},{value:"Views",id:"views",level:2},{value:"Modifications on Views",id:"modifications-on-views",level:3},{value:"Implements Modification with Triggers",id:"implements-modification-with-triggers",level:4},{value:"SQL Standard - Updatable Views",id:"sql-standard---updatable-views",level:4},{value:"MongoDB Basic Notes",id:"mongodb-basic-notes",level:2},{value:"MongoDB Set Up",id:"mongodb-set-up",level:3},{value:"MongoDB Installation",id:"mongodb-installation",level:4},{value:"MongoDB Not Upgrade",id:"mongodb-not-upgrade",level:4},{value:"MongoDB Control",id:"mongodb-control",level:4},{value:"MongoDB Uninstall",id:"mongodb-uninstall",level:4},{value:"Shell Instruction",id:"shell-instruction",level:3},{value:"create and drop",id:"create-and-drop",level:4},{value:"create",id:"create",level:5},{value:"drop",id:"drop",level:5},{value:"query",id:"query",level:4},{value:"insert",id:"insert",level:4},{value:"information",id:"information",level:4},{value:"database",id:"database",level:5},{value:"collection",id:"collection",level:5}];function c(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"database-basic-notes",children:"Database Basic Notes"})}),"\n",(0,l.jsx)(n.h2,{id:"basic-concepts",children:"Basic Concepts"}),"\n",(0,l.jsx)(n.h3,{id:"feature",children:"Feature"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Massive"}),"\n",(0,l.jsx)(n.li,{children:"Persistent"}),"\n",(0,l.jsx)(n.li,{children:"Safe"}),"\n",(0,l.jsx)(n.li,{children:"Multi-user"}),"\n",(0,l.jsx)(n.li,{children:"Convenient"}),"\n",(0,l.jsx)(n.li,{children:"Efficient"}),"\n",(0,l.jsx)(n.li,{children:"Reliable"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"common-words",children:"Common Words"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"create/drop(from)/insert into/delete from/update"}),"\n",(0,l.jsx)(n.li,{children:"restricts"}),"\n",(0,l.jsx)(n.li,{children:"sub-queries"}),"\n",(0,l.jsx)(n.li,{children:"views(shorthand for queries)"}),"\n",(0,l.jsx)(n.li,{children:"left/right join on ..."}),"\n",(0,l.jsx)(n.li,{children:"primary/foreign key"}),"\n",(0,l.jsx)(n.li,{children:"references"}),"\n"]}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"(id, name, birth, major, grade) is not normalized,\nbecause grade is not relevant to student id\n(id, name, birth) + (id, major, grade) is normalized\n(name, os, lang) is not normalized, because os isn't relevant to lang\n(name, os) + (name, lang) is normalized\nData-intensive applications may not use DBMS/Query Language at all\ne.g Hadoop, all operations on data stores in files"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"data-format",children:"Data Format"}),"\n",(0,l.jsx)(n.h3,{id:"xml",children:"XML"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"single root element"}),"\n",(0,l.jsx)(n.li,{children:"matched tags with proper nesting"}),"\n",(0,l.jsx)(n.li,{children:"unique attributes within elements"}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"dtd",children:"DTD"}),"\n",(0,l.jsx)(n.p,{children:"Document Type Definition:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["similar grammar to regular expression(",(0,l.jsx)(n.code,{children:"*?"}),")"]}),"\n",(0,l.jsx)(n.li,{children:"ID/IDRef should be unique"}),"\n",(0,l.jsx)(n.li,{children:"CDATA: character data"}),"\n",(0,l.jsx)(n.li,{children:"(#PCDATA): parsed character data (plain text between tags)"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="utf-8"?>\n\n<!DOCTYPE Bookstore [\n    <!ELEMENT Bookstore (Book)*>\n    <!ELEMENT Book (Title, Authors, Remark?)>\n    <!ATTLIST Book  ISBN ID #REQUIRED\n                    Price CDATA #REQUIRED\n                    Authors IDREFS #REQUIRED>\n    <!ELEMENT Title (#PCDATA)>\n    <!ELEMENT Remark (#PCDATA | BookRef)*>\n    <!ELEMENT BookRef EMPTY>\n    <!ATTLIST BookRef book IDREF #REQUIRED>\n    <!ELEMENT Authors (Author)*>\n    <!ELEMENT Author (First_Name, Last_Name)>\n    <!ATTLIST Author Ident ID #REQUIRED>\n    <!ELEMENT First_Name (#PCDATA)>\n    <!ELEMENT Last_Name (#PCDATA)>\n]>\n\n<Bookstore>\n    <Book ISBN="ISBN-0-23-23333-233" Price="233" Authors="Sabertazimi">\n        <Title>Kind of sword</Title>\n        <Authors>\n            <Author Ident="Sabertazimi">\n                <First_Name>Yilong</First_Name>\n                <Last_Name>Liu</Last_Name>\n            </Author>\n        </Authors>\n    </Book>\n</Bookstore>\n'})}),"\n",(0,l.jsx)(n.p,{children:"Tools: XML Copy Editor, XML Linter:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"xmllint --valid --noout Bookstore.xml\n"})}),"\n",(0,l.jsx)(n.h4,{id:"xsd",children:"XSD"}),"\n",(0,l.jsx)(n.p,{children:"XML Schema Definition:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"xmllint -schema Bookstore.xsd -noout Bookstore.xml\n"})}),"\n",(0,l.jsx)(n.h3,{id:"json",children:"JSON"}),"\n",(0,l.jsx)(n.p,{children:"JavaScript Object Notation:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"serializing data objects in files"}),"\n",(0,l.jsx)(n.li,{children:"human-readable data"}),"\n",(0,l.jsx)(n.li,{children:"semi-structured data"}),"\n",(0,l.jsx)(n.li,{children:"number/boolean/string/array/object(empty or key-value pair) recursive constructs"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"relational-algebra",children:"Relational Algebra"}),"\n",(0,l.jsx)(n.h3,{id:"operators",children:"Operators"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["select operator \u03c3(sigma): ",(0,l.jsx)(n.code,{children:"\u03c3(sID < 100 ^ sAge > 20)Table_Name"})," set constraints"]}),"\n",(0,l.jsxs)(n.li,{children:["project operator \u03c0(pi) : ",(0,l.jsx)(n.code,{children:"\u03c0(sID, GPA)Table_Name"})," select certain columns"]}),"\n",(0,l.jsxs)(n.li,{children:["cross-product operator x: Table1 x Table2,\nm tuples(rows) x n tuples(rows) => ",(0,l.jsx)(n.code,{children:"m*n"})," tuples(rows)"]}),"\n",(0,l.jsx)(n.li,{children:"natural join operator \u221e: \u03c3(E1.A1 = E2.A1 ^ E1.A2 = E2.A2 ...) (E1 x E2)"}),"\n",(0,l.jsx)(n.li,{children:"theta join operator \u221e(condition): \u03c3(condition) (E1 x E2), call condition as \u03f4"}),"\n",(0,l.jsx)(n.li,{children:"difference operator -: matching schemas => change rows/tuples"}),"\n",(0,l.jsx)(n.li,{children:"union/intersection operator \u222a / \u2229: matching schemas => change rows/tuples"}),"\n",(0,l.jsxs)(n.li,{children:["rename operator \u03c1: change schemas(attributes name),\ndifferent schemas ",(0,l.jsx)(n.code,{children:"<=>"})," same schemas (",(0,l.jsx)(n.strong,{children:"union/intersection/self-join"}),")"]}),"\n",(0,l.jsx)(n.li,{children:"assign statement :="}),"\n",(0,l.jsx)(n.li,{children:"tree notation"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"\u03c0(sID, GPA) (\u03c3(sID < 100 ^ GPA > 3.7) Student)\n"})}),"\n",(0,l.jsx)(n.h2,{id:"higher-level-database-design-models",children:"Higher-Level Database Design Models"}),"\n",(0,l.jsxs)(n.p,{children:["Higher-Level Database Design Models ",(0,l.jsx)(n.code,{children:"-Translator->"})," Relational implemented by RDBMS"]}),"\n",(0,l.jsx)(n.h3,{id:"uml",children:"UML"}),"\n",(0,l.jsx)(n.p,{children:"Unified Modeling Language: PlantUML"}),"\n",(0,l.jsx)(n.h4,{id:"classes",children:"Classes"}),"\n",(0,l.jsx)(n.p,{children:"for data modeling:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"add PK(primary key)"}),"\n",(0,l.jsx)(n.li,{children:"drop methods"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:"-----------\n| student |\n|---------|\n|sID   PK |\n|sName    |\n|GPA      |\n|---------|\n|<methods>|\n-----------\n"})}),"\n",(0,l.jsx)(n.h4,{id:"associations",children:"Associations"}),"\n",(0,l.jsx)(n.p,{children:"relationships between objects of 2 classes):"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["one to one: ",(0,l.jsx)(n.code,{children:"1..1 --- 1..1"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:["many to one: ",(0,l.jsx)(n.code,{children:"* --- 1..1"})]}),"\n",(0,l.jsxs)(n.li,{children:["one to many: ",(0,l.jsx)(n.code,{children:"1..1 --- *"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:["many to many: ",(0,l.jsx)(n.code,{children:"* --- *"}),"."]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:"-----------                   ---------\n| student |                   |college|\n|---------|                   |       |\n|sID   PK |x..y   Apply   m..n|       |\n|sName    |-------------------|       |\n|GPA      |                   |       |\n|---------|                   |       |\n|<methods>|                   |       |\n-----------                   ---------\n"})}),"\n",(0,l.jsx)(n.h4,{id:"associations-classes",children:"Associations Classes"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"classes store information of relationship edge between 2 data classes"}),"\n",(0,l.jsx)(n.li,{children:"unnecessary if 0..1 or 1..1"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:"c1 * --- 1..1 c2\ninformation of relationship edge can stored in c1\nowing to every object of c1 only associated with 1 object of c2\n"})}),"\n",(0,l.jsx)(n.h4,{id:"subclasses",children:"Subclasses"}),"\n",(0,l.jsx)(n.p,{children:"children classes"}),"\n",(0,l.jsx)(n.h4,{id:"composition-and-aggregation",children:"Composition and Aggregation"}),"\n",(0,l.jsx)(n.h3,{id:"entity-relationship-model",children:"Entity Relationship Model"}),"\n",(0,l.jsx)(n.h2,{id:"sql",children:"SQL"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"select ... from ... where"}),"\n",(0,l.jsx)(n.li,{children:"insert into ... ..."}),"\n",(0,l.jsx)(n.li,{children:"delete from ... where ..."}),"\n",(0,l.jsx)(n.li,{children:"update ... set ... = ... where ..."}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"DROP VIEW IF EXISTS Standings;\nDROP VIEW IF EXISTS Count;\nDROP VIEW IF EXISTS Wins;\nDROP TABLE IF EXISTS Matches;\nDROP TABLE IF EXISTS Players;\n\n-- Players Table\nCREATE TABLE Players (\n  id SERIAL primary key,\n  name varchar(255)\n);\n\n-- Matches Table\nCREATE TABLE Matches (\n  id SERIAL primary key,\n  player int references Players(id),\n  opponent int references Players(id),\n  result int\n);\n\n-- Wins View shows number of wins for each Player\nCREATE VIEW Wins AS\n  SELECT Players.id, COUNT(Matches.opponent) AS n\n  FROM Players\n  LEFT JOIN (SELECT * FROM Matches WHERE result>0) as Matches\n  ON Players.id = Matches.player\n  GROUP BY Players.id;\n\n-- Count View shows number of matches for each Player\nCREATE VIEW Count AS\n  SELECT Players.id, Count(Matches.opponent) AS n\n  FROM Players\n  LEFT JOIN Matches\n  ON Players.id = Matches.player\n  GROUP BY Players.id;\n\n-- Standings View shows number of wins and matches for each Player\nCREATE VIEW Standings AS\n  SELECT Players.id,Players.name,Wins.n as wins,Count.n as matches\n  FROM Players,Count,Wins\n  WHERE Players.id = Wins.id and Wins.id = Count.id;\n"})}),"\n",(0,l.jsx)(n.h2,{id:"relational-design",children:"Relational Design"}),"\n",(0,l.jsx)(n.h3,{id:"decomposition",children:"Decomposition"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"start with mega-relations: including all attributes"}),"\n",(0,l.jsx)(n.li,{children:"decompose into smaller relations(BCNF/4NF)"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"functional-dependencies",children:"functional dependencies"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"A -> B => 1-1/n-1 mapping"}),"\n",(0,l.jsx)(n.li,{children:"key sets: closure of sets contains all attributes"}),"\n"]}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:["assuming relation R(A, B, C, D, ..., G)\nand closure of A, B ",(0,l.jsx)(n.code,{children:"{A, B}"})," + ",(0,l.jsx)(n.code,{children:"A->C->D, B->E->F, F->G"}),"\n=> ",(0,l.jsx)(n.code,{children:"{A, B}+ = {A, B, C, ..., G}"}),"\nthen, ",(0,l.jsx)(n.code,{children:"{A, B}"})," is a key\nif there no exists such closure, then treat all-attributes as a key"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"bcnf",children:"BCNF"}),"\n",(0,l.jsx)(n.p,{children:"boyce-codd normal form:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"for each A -> B having A is super key && B isn't key"}),"\n",(0,l.jsx)(n.li,{children:"not exists A -> B -> C"}),"\n",(0,l.jsx)(n.li,{children:"here's the algorithm:"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:"/*\n * @brief fixed point algorithm just like most algorithms from compiler\n *\n * by decomposing to transform non-key dependent attributes to key dependent attributes\n */\n\ncompute FDs for R\ncompute key for R using its FDs\n\nwhile (there is relation R' aren't in BCNF) {\n    pick any R' with A -> B that violates BCNF (A is not its key)\n    decompose R' into R1(A, B) and R2(A, rest)\n    compute FDs for R1 and R2\n    compute keys for R1 and R2 using their FDs\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"multi-valued-dependencies",children:"Multi Valued Dependencies"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"A -> B && rest attributes"})," => ",(0,l.jsx)(n.code,{children:"A ->> B"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"A ->> B"})," (1-n mapping), ",(0,l.jsx)(n.code,{children:"A ->> C"})," (1-n mapping),\nno ",(0,l.jsx)(n.code,{children:"B -> C"}),"/",(0,l.jsx)(n.code,{children:"C ->> B"}),", ",(0,l.jsx)(n.code,{children:"B * C"})," redundant tuples/rows."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"A ->>B && A ->>C"})," => ",(0,l.jsx)(n.code,{children:"A ->> B\u2229C"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"A ->>B && B ->>C"})," => ",(0,l.jsx)(n.code,{children:"A ->> C-B"}),"."]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"4nf",children:"4NF"}),"\n",(0,l.jsx)(n.p,{children:"Forth normal form:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"if A ->> B then A is key && B isn't key"}),"\n",(0,l.jsx)(n.li,{children:"here's the algorithm:"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:"/*\n * @brief fixed point algorithm just like most algorithms from compiler\n *\n * by decomposing to transform non-key dependent attributes to key dependent attributes\n */\n\ncompute FDs and MVDs for R\ncompute key for R using its FDs\n\nwhile (there is relation R' aren't in 4NF) {\n    pick any R' with A ->> B that violates 4NF(A is not its key)\n    decompose R' into R1(A, B) and R2(A, rest)\n    compute FDs and MVDs for R1 and R2\n    compute keys for R1 and R2 using their FDs\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"normalized-design",children:"Normalized Design"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"every row has the same number of columns"}),"\n",(0,l.jsx)(n.li,{children:"every row has a unique key(PRIMARY KEY)"}),"\n",(0,l.jsx)(n.li,{children:"everything in a row is all relevant to unique key"}),"\n",(0,l.jsx)(n.li,{children:"everything in a row is all relevant to each other"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"indexes",children:"Indexes"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"primary mechanism to improve performance of database"}),"\n",(0,l.jsx)(n.li,{children:"persist data structures stored in database (hash tables/B trees/B+ trees)"}),"\n",(0,l.jsxs)(n.li,{children:["trade off: ",(0,l.jsx)(n.code,{children:"scale of database"})," and ",(0,l.jsx)(n.code,{children:"workload(query/update rate)"}),"\nas input of physical design advisors"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"CREATE INDEX IndexName on T(A)\nCREATE INDEX IndexName on T(A1, A2, ..., An)\nCREATE UNIQUE INDEX IndexName on T(A)\nDROP INDEX IndexName\n"})}),"\n",(0,l.jsx)(n.h2,{id:"transactions",children:"Transactions"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"a sequence of one/more SQL operations treated as a unit"}),"\n",(0,l.jsx)(n.li,{children:"target: concurrency and failures recovery"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"transaction-standard",children:"Transaction Standard"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"all or nothing(atomicity)"}),"\n",(0,l.jsx)(n.li,{children:"transaction begins automatically on first SQL statement"}),"\n",(0,l.jsx)(n.li,{children:'on "commit": old transaction ends, new one begins'}),"\n",(0,l.jsx)(n.li,{children:"on session termination: current transaction ends"}),"\n",(0,l.jsx)(n.li,{children:'"AutoCommit" turns each statement into transaction'}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"acid-properties",children:"ACID Properties"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Atomicity(Logging)"}),"\n",(0,l.jsx)(n.li,{children:"Consistency"}),"\n",(0,l.jsx)(n.li,{children:"Isolation: guarantee serializability(Locking)"}),"\n",(0,l.jsx)(n.li,{children:"Durability(Logging)"}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"isolation-level",children:"Isolation Level"}),"\n",(0,l.jsx)(n.p,{children:"weaker isolation level: read uncommitted < read committed < repeatable read < serializable"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"increased concurrency + decreased overhead = increased performance"}),"\n",(0,l.jsx)(n.li,{children:"weaker consistency guarantees"}),"\n",(0,l.jsx)(n.li,{children:"some system default: repeatable read"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"SET TRANSACTION READ ONLY;\nSET TRANSACTION ISOLATION LEVEL REPEATABLE READ;\n"})}),"\n",(0,l.jsx)(n.h2,{id:"integrity-constraints",children:"Integrity Constraints"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE TableName (\n    ... PRIMARY KEY,\n    ... UNIQUE,\n    ... CHECK (Condition),\n    ... references TableName(ForeignKey),\n    ... references TableName(ForeignKey) ON DELETE/UPDATE RESTRICT/SET NULL/CASCADE,\n    ... ,\n    PRIMARY KEY (Attr1, Attr2, ...),\n    UNIQUE (Attr1, Attr2, ...),\n    CHECK (Condition),\n    FOREIGN KEY (Attr1, Attr2, ...) references\n      TableName(Bttr1, Bttr2, ...) [ ON ... (default RESTRICT) ]\n);\n\nCREATE ASSERTION AssertionName\nCHECK (Condition);\n"})}),"\n",(0,l.jsx)(n.h2,{id:"triggers-dbms-level-constraints",children:"Triggers (DBMS Level Constraints)"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"CREATE TRIGGER TriggerName\nBEFORE|AFTER|INSTEAD OF Events(INSERT/UPDATE OF/DELETE ON TableName)\n[ referencing-variables ]\n[ FOR EACH ROW ]\nWHEN ( Condition )\n[ BEGIN ]\nAction\n[ END ];\n\nCREATE TRIGGER Cascade\nAfter DELETE ON S\nREFERENCING OLD ROW AS O\nFOR EACH ROW\nDELETE FROM R WHERE A = O.B (R.A = S.B)\n\nCREATE TRIGGER Cascade\nAfter DELETE ON S\nREFERENCING OLD TABLE AS OT\nDELETE FROM R WHERE A IN (SELECT B FROM BT)\n"})}),"\n",(0,l.jsx)(n.h2,{id:"views",children:"Views"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"logical layer: hiding data from users"}),"\n",(0,l.jsx)(n.li,{children:"modularity and reuse of query"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"VIEW ViewName = VIEWQUERY (R1, R2, ..., Rn)\n\nCREATE VIEW ViewName (T1, T2, ..., Tn) AS\n< Query >\n"})}),"\n",(0,l.jsx)(n.h3,{id:"modifications-on-views",children:"Modifications on Views"}),"\n",(0,l.jsx)(n.p,{children:"owing to views are logical layer, it's senseless to modify data on views"}),"\n",(0,l.jsx)(n.h4,{id:"implements-modification-with-triggers",children:"Implements Modification with Triggers"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"CREATE TRIGGER TriggerName\nINSTEAD OF DELETE/UPDATE OF/INSERT ON ViewName\n[ referencing-variables ]\n[ FOR EACH ROW ]\nWHEN ( Condition )\n[ BEGIN ]\nAction\n[ END ];\n"})}),"\n",(0,l.jsx)(n.h4,{id:"sql-standard---updatable-views",children:"SQL Standard - Updatable Views"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"SELECT (no DISTINCT) on single table T"}),"\n",(0,l.jsx)(n.li,{children:"no GROUP BY/HAVING or Aggregation"}),"\n",(0,l.jsx)(n.li,{children:"attributes can't be NULL/default values"}),"\n",(0,l.jsx)(n.li,{children:"sub-queries cant' refer to table T"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"CREATE VIEW\n...\nWITH CHECK OPTION;\n"})}),"\n",(0,l.jsx)(n.h2,{id:"mongodb-basic-notes",children:"MongoDB Basic Notes"}),"\n",(0,l.jsx)(n.h3,{id:"mongodb-set-up",children:"MongoDB Set Up"}),"\n",(0,l.jsx)(n.h4,{id:"mongodb-installation",children:"MongoDB Installation"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927\necho "deb http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.2 multiverse"\n\\ | sudo tee /etc/apt/sources.list.d/mongodb-org-3.2.list\nsudo apt-get update\nsudo apt-get install -y mongodb-org mongodb-org-server\n\\ mongodb-org-shell mongodb-org-mongos mongodb-org-tools\n'})}),"\n",(0,l.jsx)(n.h4,{id:"mongodb-not-upgrade",children:"MongoDB Not Upgrade"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'echo "mongodb-org hold" | sudo dpkg --set-selections\necho "mongodb-org-server hold" | sudo dpkg --set-selections\necho "mongodb-org-shell hold" | sudo dpkg --set-selections\necho "mongodb-org-mongos hold" | sudo dpkg --set-selections\necho "mongodb-org-tools hold" | sudo dpkg --set-selections\n'})}),"\n",(0,l.jsx)(n.h4,{id:"mongodb-control",children:"MongoDB Control"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"sudo service mongod start\nsudo service mongod stop\nsudo service mongod restart\n"})}),"\n",(0,l.jsx)(n.h4,{id:"mongodb-uninstall",children:"MongoDB Uninstall"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"sudo service mongod stop\nsudo apt-get purge mongodb-org*\nsudo rm -r /var/log/mongodb\nsudo rm -r /var/lib/mongodb\n"})}),"\n",(0,l.jsx)(n.h3,{id:"shell-instruction",children:"Shell Instruction"}),"\n",(0,l.jsx)(n.h4,{id:"create-and-drop",children:"create and drop"}),"\n",(0,l.jsx)(n.h5,{id:"create",children:"create"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"use test\nshow dbs\n"})}),"\n",(0,l.jsx)(n.h5,{id:"drop",children:"drop"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"use dbToDrop\ndb.dropDatabase()\n"})}),"\n",(0,l.jsx)(n.h4,{id:"query",children:"query"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"db.collection.find().pretty()\n"})}),"\n",(0,l.jsx)(n.h4,{id:"insert",children:"insert"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"db.collection.insert();\n"})}),"\n",(0,l.jsx)(n.h4,{id:"information",children:"information"}),"\n",(0,l.jsx)(n.h5,{id:"database",children:"database"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"db.getName()\ndb.stats()\ndb.version()\ndb.getMongo()\n"})}),"\n",(0,l.jsx)(n.h5,{id:"collection",children:"collection"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"db.getCollectionNames()\ndb.printCollectionStats()\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},842:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var i=s(8101);const l={},a=i.createContext(l);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);